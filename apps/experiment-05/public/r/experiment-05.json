{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "experiment-05",
  "type": "registry:style",
  "dependencies": [
    "@radix-ui/react-dialog",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-label",
    "@radix-ui/react-popover",
    "@radix-ui/react-select",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "cmdk",
    "next-themes",
    "recharts",
    "use-scramble"
  ],
  "devDependencies": [
    "tw-animate-css"
  ],
  "files": [
    {
      "path": "app/layout.tsx",
      "content": "import { Geist, Geist_Mono } from \"next/font/google\";\nimport { ThemeProvider } from \"../providers/theme-provider\";\nimport \"./globals.css\";\n\nconst fontSans = Geist({\n  variable: \"--font-sans\",\n  subsets: [\"latin\"],\n});\n\nconst fontMono = Geist_Mono({\n  variable: \"--font-mono\",\n  subsets: [\"latin\"],\n});\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={`${fontSans.variable} ${fontMono.variable} font-sans antialiased`}\n      >\n        <ThemeProvider\n          attribute=\"class\"\n          defaultTheme=\"system\"\n          enableSystem\n          disableTransitionOnChange\n        >\n          {children}\n        </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/layout.tsx"
    },
    {
      "path": "app/page.tsx",
      "content": "import type { Metadata } from \"next\";\n\nexport const metadata: Metadata = {\n  title: \"Experiment 05 - Crafted.is\",\n};\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { CandlestickChart } from \"@/components/candlestick-chart\";\nimport CoinSelector from \"@/components/coin-selector\";\nimport PeriodSelector from \"@/components/period-selector\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport ThemeToggle from \"@/components/theme-toggle\";\n\nexport default function Page() {\n  return (\n    <div className=\"px-6 py-20 min-h-svh flex flex-col justify-center bg-zinc-100 dark:bg-zinc-950\">\n      <div className=\"fixed top-4 right-4\">\n        <ThemeToggle />\n      </div>\n      <div className=\"w-full max-w-6xl mx-auto\">\n        <div className=\"flex flex-col md:flex-row gap-6\">\n          {/* Chart area */}\n          <div className=\"flex-1 @container\">\n            <Card className=\"shadow-2xl rounded-3xl border-transparent dark:border-border/64\">\n              <CardContent>\n                {/* Header */}\n                <div className=\"flex flex-col @xl:flex-row @xl:items-center gap-3 mb-6\">\n                  {/* Left side */}\n                  <div className=\"flex-1 flex gap-3\">\n                    {/* Coin symbols */}\n                    <div className=\"mt-0.5 shrink-0\">\n                      <div className=\"inline-flex rounded-full border-2 border-card last:-ms-3.5 last:translate-y-3.5\">\n                        <img\n                          src=\"https://raw.githubusercontent.com/origin-space/origin-images/refs/heads/main/exp5/coin-01_tidmpi.svg\"\n                          width={28}\n                          height={28}\n                          alt=\"TRX\"\n                        />\n                      </div>\n                      <div className=\"inline-flex rounded-full border-2 border-card last:-ms-3.5 last:translate-y-3.5\">\n                        <img\n                          src=\"https://raw.githubusercontent.com/origin-space/origin-images/refs/heads/main/exp5/coin-02_a6ineb.svg\"\n                          width={28}\n                          height={28}\n                          alt=\"TOK\"\n                        />\n                      </div>\n                    </div>\n                    {/* Exchange information */}\n                    <div className=\"flex flex-col gap-0.5\">\n                      <div className=\"text-xl font-semibold\">\n                        TRX <span className=\"text-muted-foreground\">:</span> TOK\n                      </div>\n                      <div className=\"text-[13px] text-muted-foreground/72 dark:text-muted-foreground/64 uppercase font-medium\">\n                        1 Year{\" \"}\n                        <span className=\"text-muted-foreground/40\">Â·</span> PRC{\" \"}\n                        <span className=\"text-emerald-500\">\n                          1,970.84 (+4.37%)\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  {/* Right side */}\n                  <div className=\"flex items-center justify-between gap-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <CoinSelector defaultValue=\"TRX\" />\n                      <CoinSelector defaultValue=\"TOK\" />\n                    </div>\n                    <PeriodSelector />\n                  </div>\n                </div>\n                {/* The Chart */}\n                <CandlestickChart />\n              </CardContent>\n            </Card>\n          </div>\n          {/* Sidebar with links */}\n          <Sidebar />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/dashboard/page.tsx"
    },
    {
      "path": "components/candlestick-chart.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Cell,\n  CartesianGrid,\n  ReferenceLine,\n  TooltipProps,\n} from \"recharts\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n} from \"@/components/ui/chart\";\n\nconst data = [\n  // November 2024\n  { date: \"2024-11-01\", openClose: [0.9188, 0.9201], high: 0.9232, low: 0.917 },\n  { date: \"2024-11-04\", openClose: [0.9193, 0.9181], high: 0.92, low: 0.9162 },\n  {\n    date: \"2024-11-05\",\n    openClose: [0.9193, 0.9171],\n    high: 0.9197,\n    low: 0.9144,\n  },\n  {\n    date: \"2024-11-06\",\n    openClose: [0.9149, 0.9252],\n    high: 0.9361,\n    low: 0.9144,\n  },\n  { date: \"2024-11-07\", openClose: [0.932, 0.9286], high: 0.9334, low: 0.9238 },\n  {\n    date: \"2024-11-08\",\n    openClose: [0.9257, 0.9305],\n    high: 0.9357,\n    low: 0.9254,\n  },\n  {\n    date: \"2024-11-11\",\n    openClose: [0.9339, 0.9365],\n    high: 0.9409,\n    low: 0.9322,\n  },\n  {\n    date: \"2024-11-12\",\n    openClose: [0.9384, 0.9408],\n    high: 0.9438,\n    low: 0.9378,\n  },\n  { date: \"2024-11-13\", openClose: [0.9413, 0.943], high: 0.9473, low: 0.9388 },\n  { date: \"2024-11-14\", openClose: [0.9467, 0.9488], high: 0.9526, low: 0.945 },\n  {\n    date: \"2024-11-15\",\n    openClose: [0.9497, 0.9475],\n    high: 0.9509,\n    low: 0.9441,\n  },\n  {\n    date: \"2024-11-18\",\n    openClose: [0.9497, 0.9462],\n    high: 0.9497,\n    low: 0.9428,\n  },\n  {\n    date: \"2024-11-19\",\n    openClose: [0.9435, 0.9467],\n    high: 0.9501,\n    low: 0.9433,\n  },\n  {\n    date: \"2024-11-20\",\n    openClose: [0.9438, 0.9471],\n    high: 0.9517,\n    low: 0.9425,\n  },\n  {\n    date: \"2024-11-21\",\n    openClose: [0.9484, 0.9516],\n    high: 0.9558,\n    low: 0.9474,\n  },\n  {\n    date: \"2024-11-22\",\n    openClose: [0.9547, 0.9601],\n    high: 0.9677,\n    low: 0.9526,\n  },\n  { date: \"2024-11-25\", openClose: [0.9542, 0.9533], high: 0.957, low: 0.9497 },\n  {\n    date: \"2024-11-26\",\n    openClose: [0.9528, 0.9537],\n    high: 0.9592,\n    low: 0.9483,\n  },\n  {\n    date: \"2024-11-27\",\n    openClose: [0.9534, 0.9496],\n    high: 0.9547,\n    low: 0.9445,\n  },\n  { date: \"2024-11-28\", openClose: [0.9464, 0.948], high: 0.9499, low: 0.9461 },\n  {\n    date: \"2024-11-29\",\n    openClose: [0.9474, 0.9462],\n    high: 0.9486,\n    low: 0.9437,\n  },\n\n  // December 2024\n  {\n    date: \"2024-12-02\",\n    openClose: [0.9454, 0.9507],\n    high: 0.9559,\n    low: 0.9454,\n  },\n  {\n    date: \"2024-12-03\",\n    openClose: [0.9525, 0.9517],\n    high: 0.9541,\n    low: 0.9492,\n  },\n  {\n    date: \"2024-12-04\",\n    openClose: [0.9515, 0.9516],\n    high: 0.9549,\n    low: 0.9484,\n  },\n  { date: \"2024-12-05\", openClose: [0.9514, 0.948], high: 0.9516, low: 0.9444 },\n  {\n    date: \"2024-12-06\",\n    openClose: [0.9445, 0.9447],\n    high: 0.9485,\n    low: 0.9408,\n  },\n  { date: \"2024-12-09\", openClose: [0.947, 0.9467], high: 0.9495, low: 0.9439 },\n  {\n    date: \"2024-12-10\",\n    openClose: [0.9476, 0.9494],\n    high: 0.9525,\n    low: 0.9463,\n  },\n  {\n    date: \"2024-12-11\",\n    openClose: [0.9499, 0.9515],\n    high: 0.9542,\n    low: 0.9488,\n  },\n  {\n    date: \"2024-12-12\",\n    openClose: [0.9527, 0.9526],\n    high: 0.9557,\n    low: 0.9496,\n  },\n  {\n    date: \"2024-12-13\",\n    openClose: [0.9554, 0.9534],\n    high: 0.9566,\n    low: 0.9502,\n  },\n  { date: \"2024-12-16\", openClose: [0.953, 0.9525], high: 0.9547, low: 0.9503 },\n  {\n    date: \"2024-12-17\",\n    openClose: [0.9513, 0.9518],\n    high: 0.9543,\n    low: 0.9493,\n  },\n  { date: \"2024-12-18\", openClose: [0.9532, 0.959], high: 0.9667, low: 0.9512 },\n  {\n    date: \"2024-12-19\",\n    openClose: [0.9659, 0.9629],\n    high: 0.9664,\n    low: 0.9595,\n  },\n  { date: \"2024-12-20\", openClose: [0.965, 0.962], high: 0.9668, low: 0.9572 },\n  { date: \"2024-12-23\", openClose: [0.9583, 0.9601], high: 0.963, low: 0.9573 },\n  { date: \"2024-12-24\", openClose: [0.9609, 0.9618], high: 0.963, low: 0.9606 },\n  {\n    date: \"2024-12-26\",\n    openClose: [0.9614, 0.9606],\n    high: 0.9624,\n    low: 0.9588,\n  },\n  { date: \"2024-12-27\", openClose: [0.9594, 0.9593], high: 0.961, low: 0.9575 },\n  {\n    date: \"2024-12-30\",\n    openClose: [0.9588, 0.9602],\n    high: 0.9642,\n    low: 0.9562,\n  },\n  { date: \"2024-12-31\", openClose: [0.9609, 0.963], high: 0.9667, low: 0.9593 },\n\n  // January 2025\n  { date: \"2025-01-02\", openClose: [0.9656, 0.971], high: 0.9781, low: 0.9639 },\n  { date: \"2025-01-03\", openClose: [0.974, 0.9722], high: 0.9745, low: 0.9699 },\n  {\n    date: \"2025-01-06\",\n    openClose: [0.9704, 0.9648],\n    high: 0.9713,\n    low: 0.9582,\n  },\n  {\n    date: \"2025-01-07\",\n    openClose: [0.9624, 0.9627],\n    high: 0.9671,\n    low: 0.9584,\n  },\n  {\n    date: \"2025-01-08\",\n    openClose: [0.9671, 0.9694],\n    high: 0.9733,\n    low: 0.9655,\n  },\n  {\n    date: \"2025-01-09\",\n    openClose: [0.9691, 0.9706],\n    high: 0.9724,\n    low: 0.9689,\n  },\n  {\n    date: \"2025-01-10\",\n    openClose: [0.9709, 0.9743],\n    high: 0.9789,\n    low: 0.9698,\n  },\n  {\n    date: \"2025-01-13\",\n    openClose: [0.9768, 0.9791],\n    high: 0.9826,\n    low: 0.9756,\n  },\n  {\n    date: \"2025-01-14\",\n    openClose: [0.9762, 0.9734],\n    high: 0.9767,\n    low: 0.9701,\n  },\n  {\n    date: \"2025-01-15\",\n    openClose: [0.9701, 0.9703],\n    high: 0.9747,\n    low: 0.9659,\n  },\n  { date: \"2025-01-16\", openClose: [0.9718, 0.972], high: 0.9745, low: 0.9695 },\n  {\n    date: \"2025-01-17\",\n    openClose: [0.9707, 0.9711],\n    high: 0.9741,\n    low: 0.9681,\n  },\n  { date: \"2025-01-20\", openClose: [0.9725, 0.9662], high: 0.974, low: 0.9585 },\n  { date: \"2025-01-21\", openClose: [0.96, 0.9626], high: 0.9669, low: 0.9583 },\n  { date: \"2025-01-22\", openClose: [0.959, 0.9592], high: 0.9621, low: 0.9563 },\n  { date: \"2025-01-23\", openClose: [0.9606, 0.961], high: 0.964, low: 0.958 },\n  {\n    date: \"2025-01-24\",\n    openClose: [0.9601, 0.9554],\n    high: 0.9604,\n    low: 0.9505,\n  },\n  { date: \"2025-01-27\", openClose: [0.9541, 0.953], high: 0.9565, low: 0.9494 },\n  {\n    date: \"2025-01-28\",\n    openClose: [0.9531, 0.9566],\n    high: 0.9603,\n    low: 0.9529,\n  },\n  {\n    date: \"2025-01-29\",\n    openClose: [0.9587, 0.9603],\n    high: 0.9631,\n    low: 0.9575,\n  },\n  {\n    date: \"2025-01-30\",\n    openClose: [0.9596, 0.9591],\n    high: 0.9628,\n    low: 0.9553,\n  },\n  {\n    date: \"2025-01-31\",\n    openClose: [0.9623, 0.9652],\n    high: 0.9661,\n    low: 0.9585,\n  },\n\n  // February 2025\n  {\n    date: \"2025-02-03\",\n    openClose: [0.9775, 0.9729],\n    high: 0.9796,\n    low: 0.9662,\n  },\n  {\n    date: \"2025-02-04\",\n    openClose: [0.9667, 0.9681],\n    high: 0.9735,\n    low: 0.9627,\n  },\n  { date: \"2025-02-05\", openClose: [0.9635, 0.961], high: 0.9643, low: 0.9576 },\n  { date: \"2025-02-06\", openClose: [0.9612, 0.9635], high: 0.9659, low: 0.961 },\n  {\n    date: \"2025-02-07\",\n    openClose: [0.9631, 0.9655],\n    high: 0.9702,\n    low: 0.9607,\n  },\n  { date: \"2025-02-10\", openClose: [0.9691, 0.97], high: 0.9726, low: 0.9675 },\n  {\n    date: \"2025-02-11\",\n    openClose: [0.9702, 0.9674],\n    high: 0.9716,\n    low: 0.9632,\n  },\n  {\n    date: \"2025-02-12\",\n    openClose: [0.9651, 0.9641],\n    high: 0.9693,\n    low: 0.9589,\n  },\n  { date: \"2025-02-13\", openClose: [0.9631, 0.9597], high: 0.964, low: 0.9554 },\n  {\n    date: \"2025-02-14\",\n    openClose: [0.9555, 0.9541],\n    high: 0.9572,\n    low: 0.9511,\n  },\n  { date: \"2025-02-17\", openClose: [0.954, 0.9536], high: 0.9554, low: 0.9518 },\n  { date: \"2025-02-18\", openClose: [0.9539, 0.956], high: 0.9583, low: 0.9536 },\n  {\n    date: \"2025-02-19\",\n    openClose: [0.9573, 0.9587],\n    high: 0.9615,\n    low: 0.9559,\n  },\n  {\n    date: \"2025-02-20\",\n    openClose: [0.9594, 0.9559],\n    high: 0.9598,\n    low: 0.9521,\n  },\n  { date: \"2025-02-21\", openClose: [0.9523, 0.9545], high: 0.957, low: 0.9519 },\n  {\n    date: \"2025-02-24\",\n    openClose: [0.9541, 0.9533],\n    high: 0.9567,\n    low: 0.9498,\n  },\n  {\n    date: \"2025-02-25\",\n    openClose: [0.9553, 0.9535],\n    high: 0.9563,\n    low: 0.9507,\n  },\n  { date: \"2025-02-26\", openClose: [0.951, 0.9522], high: 0.9546, low: 0.9499 },\n  {\n    date: \"2025-02-27\",\n    openClose: [0.9538, 0.9574],\n    high: 0.9618,\n    low: 0.9531,\n  },\n  {\n    date: \"2025-02-28\",\n    openClose: [0.9617, 0.9625],\n    high: 0.9653,\n    low: 0.9597,\n  },\n];\n\ninterface CandlestickData {\n  date: string;\n  openClose: [number, number];\n  high: number;\n  low: number;\n}\n\nconst chartConfig = {\n  openClose: {\n    label: \"Price\",\n    color: \"var(--chart-1)\",\n  },\n  high: {\n    label: \"High\",\n    color: \"var(--chart-2)\",\n  },\n  low: {\n    label: \"Low\",\n    color: \"var(--chart-3)\",\n  },\n} satisfies ChartConfig;\n\ninterface CandlestickProps {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  low: number;\n  high: number;\n  openClose: [number, number];\n}\n\nconst Candlestick = (props: CandlestickProps) => {\n  const {\n    x,\n    y,\n    width,\n    height,\n    low,\n    high,\n    openClose: [open, close],\n  } = props;\n  const isGrowing = open < close;\n  const ratio = Math.abs(height / (open - close));\n\n  return (\n    <g>\n      <path\n        className={`${isGrowing ? \"fill-emerald-500\" : \"fill-rose-500\"}`}\n        d={`\n            M ${x},${y}\n            L ${x},${y + height}\n            L ${x + width},${y + height}\n            L ${x + width},${y}\n            L ${x},${y}\n          `}\n      />\n      <g\n        className={`${isGrowing ? \"stroke-emerald-500\" : \"stroke-rose-500\"}`}\n        strokeWidth=\"1\"\n      >\n        {/* bottom line */}\n        {isGrowing ? (\n          <path\n            d={`\n                M ${x + width / 2}, ${y + height}\n                v ${(open - low) * ratio}\n              `}\n          />\n        ) : (\n          <path\n            d={`\n                M ${x + width / 2}, ${y}\n                v ${(close - low) * ratio}\n              `}\n          />\n        )}\n        {/* top line */}\n        {isGrowing ? (\n          <path\n            d={`\n                M ${x + width / 2}, ${y}\n                v ${(close - high) * ratio}\n              `}\n          />\n        ) : (\n          <path\n            d={`\n                M ${x + width / 2}, ${y + height}\n                v ${(open - high) * ratio}\n              `}\n          />\n        )}\n      </g>\n    </g>\n  );\n};\n\nconst renderCandlestick = (props: any) => {\n  // Extract the necessary data from the props\n  const { x, y, width, height, payload } = props;\n\n  // If we have valid payload, use its data\n  if (\n    payload &&\n    payload.low !== undefined &&\n    payload.high !== undefined &&\n    payload.openClose\n  ) {\n    return (\n      <Candlestick\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        low={payload.low}\n        high={payload.high}\n        openClose={payload.openClose}\n      />\n    );\n  }\n\n  // Return an empty candlestick with default values if payload is missing\n  return (\n    <Candlestick\n      x={x || 0}\n      y={y || 0}\n      width={width || 0}\n      height={height || 0}\n      low={0}\n      high={0}\n      openClose={[0, 0]}\n    />\n  );\n};\n\nconst CustomTooltip = ({ active, payload }: TooltipProps<number, string>) => {\n  if (active && payload && payload.length) {\n    const data = payload[0]?.payload as CandlestickData | undefined;\n    if (!data) return null;\n\n    return (\n      <div className=\"bg-popover text-popover-foreground grid min-w-32 items-start gap-1.5 rounded-lg border px-3 py-1.5 text-xs\">\n        <p className=\"font-medium\">\n          {new Date(data.date).toLocaleDateString(\"en-US\", {\n            weekday: \"short\",\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\",\n          })}\n        </p>\n        <p className=\"text-muted-foreground\">\n          Open:{\" \"}\n          <span className=\"text-foreground font-medium\">\n            {data.openClose[0]}\n          </span>\n        </p>\n        <p className=\"text-muted-foreground\">\n          High: <span className=\"text-foreground font-medium\">{data.high}</span>\n        </p>\n        <p className=\"text-muted-foreground\">\n          Low: <span className=\"text-foreground font-medium\">{data.low}</span>\n        </p>\n        <p className=\"text-muted-foreground\">\n          Close:{\" \"}\n          <span className=\"text-foreground font-medium\">\n            {data.openClose[1]}\n          </span>\n        </p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nfunction CandlestickChart() {\n  const minValue = data.reduce(\n    (minValue: number | null, { low, openClose: [open, close] }) => {\n      const currentMin = Math.min(low ?? 0, open ?? 0, close ?? 0);\n      return minValue === null || currentMin < minValue ? currentMin : minValue;\n    },\n    null as number | null,\n  );\n  const maxValue = data.reduce(\n    (maxValue: number, { high, openClose: [open, close] }) => {\n      const currentMax = Math.max(high ?? 0, open ?? 0, close ?? 0);\n      return maxValue === null || currentMax > maxValue ? currentMax : maxValue;\n    },\n    minValue || 0,\n  );\n\n  // Format date to \"Jan '25\" style\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    const month = date.toLocaleString(\"en-US\", { month: \"short\" });\n    const year = date.getFullYear().toString().slice(2);\n    return `${month} '${year}`;\n  };\n\n  // Custom tick formatter to show each month only once\n  const customTickFormatter = (value: string, index: number) => {\n    const currentDate = new Date(value);\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n\n    // For the first item, always show the month\n    if (index === 0) return formatDate(value);\n\n    // Get previous date safely\n    const prevItem = data[index - 1];\n    if (!prevItem) return formatDate(value);\n\n    const prevDate = new Date(prevItem.date);\n    const prevMonth = prevDate.getMonth();\n    const prevYear = prevDate.getFullYear();\n\n    // Only show the month if it's different from the previous one\n    if (currentMonth !== prevMonth || currentYear !== prevYear) {\n      return formatDate(value);\n    }\n\n    return \"\";\n  };\n\n  // Get the most recent day's close value\n  const mostRecentData = data[data.length - 1];\n  const mostRecentClose = mostRecentData ? mostRecentData.openClose[1] : null;\n\n  // Add this line to define isGrowing\n  const isGrowing =\n    mostRecentData &&\n    mostRecentData.openClose &&\n    mostRecentData.openClose[1] !== undefined &&\n    mostRecentData.openClose[0] !== undefined\n      ? mostRecentData.openClose[1] > mostRecentData.openClose[0]\n      : undefined;\n\n  return (\n    <div className=\"w-full\">\n      <ChartContainer\n        config={chartConfig}\n        className=\"aspect-auto h-110 w-full [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-zinc-950/5 dark:[&_.recharts-rectangle.recharts-tooltip-cursor]:fill-zinc-950/25 [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/64 [&_.recharts-cartesian-axis-line]:stroke-border/64 [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground/72 dark:[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground/64\"\n      >\n        <BarChart data={data} maxBarSize={20} margin={{ left: 20, right: -5 }}>\n          <CartesianGrid vertical={false} strokeWidth={1} />\n          <XAxis\n            dataKey=\"date\"\n            tickLine={false}\n            tickFormatter={customTickFormatter}\n            interval={0}\n            minTickGap={5}\n            tickMargin={12}\n          />\n          <YAxis\n            domain={[\n              minValue !== null\n                ? minValue - (maxValue - (minValue ?? 0)) * 0.1\n                : 0,\n              maxValue + (maxValue - (minValue ?? 0)) * 0.1,\n            ]}\n            tickCount={7}\n            tickLine={false}\n            orientation=\"right\"\n            tickFormatter={(value) => value.toFixed(4)}\n          />\n\n          {/* Reference line for most recent close value */}\n          {mostRecentClose && (\n            <ReferenceLine\n              y={mostRecentClose}\n              stroke=\"var(--muted-foreground)\"\n              opacity={0.5}\n              strokeWidth={1}\n              strokeDasharray=\"2 2\"\n              label={({ viewBox }) => (\n                <g\n                  transform={`translate(${viewBox.x + viewBox.width + 5},${viewBox.y})`}\n                >\n                  <rect\n                    x={-2}\n                    y={-10}\n                    width={50}\n                    height={20}\n                    fill={\n                      isGrowing\n                        ? \"var(--color-emerald-500)\"\n                        : \"var(--color-rose-500)\"\n                    }\n                    rx={4}\n                  />\n                  <text\n                    x={2}\n                    y={4}\n                    fill=\"#fff\"\n                    fontSize={12}\n                    fontWeight=\"500\"\n                    textAnchor=\"start\"\n                  >\n                    {mostRecentClose.toFixed(4)}\n                  </text>\n                </g>\n              )}\n            />\n          )}\n\n          <ChartTooltip content={<CustomTooltip />} />\n          <Bar dataKey=\"openClose\" shape={renderCandlestick}>\n            {data.map(({ date }: any) => (\n              <Cell key={`cell-${date}`} />\n            ))}\n          </Bar>\n        </BarChart>\n      </ChartContainer>\n    </div>\n  );\n}\n\nexport { CandlestickChart };\n",
      "type": "registry:component"
    },
    {
      "path": "components/charts-extra.tsx",
      "content": "import { TooltipProps } from \"recharts\";\n\ninterface CustomTooltipContentProps extends TooltipProps<number, string> {\n  colorMap?: Record<string, string>;\n  labelMap?: Record<string, string>;\n  // Optional array to define display order\n  dataKeys?: string[];\n  // Optional formatter for values\n  valueFormatter?: (value: number) => string;\n}\n\nexport function CustomTooltipContent({\n  active,\n  payload,\n  label,\n  colorMap = {},\n  labelMap = {},\n  dataKeys, // If provided, will be used to order the items\n  valueFormatter = (value) => `$${value.toLocaleString()}`,\n}: CustomTooltipContentProps) {\n  if (!active || !payload || !payload.length) {\n    return null;\n  }\n\n  // Create a map of payload items by dataKey for easy lookup\n  const payloadMap = payload.reduce(\n    (acc, item) => {\n      acc[item.dataKey as string] = item;\n      return acc;\n    },\n    {} as Record<string, (typeof payload)[0]>,\n  );\n\n  // If dataKeys is provided, use it to order the items\n  // Otherwise, use the original payload order\n  const orderedPayload = dataKeys\n    ? dataKeys\n        .filter((key) => payloadMap[key]) // Only include keys that exist in the payload\n        .map((key) => payloadMap[key])\n    : payload;\n\n  return (\n    <div className=\"bg-popover text-popover-foreground grid min-w-32 items-start gap-1.5 rounded-lg border px-3 py-1.5 text-xs\">\n      <div className=\"font-medium\">{label}</div>\n      <div className=\"grid gap-1.5\">\n        {orderedPayload.map((entry, index) => {\n          // Skip undefined entries\n          if (!entry) return null;\n\n          const name = entry.dataKey as string;\n          const value = entry.value as number;\n\n          // Get color and label from maps, with fallbacks\n          const color = colorMap[name] || \"var(--chart-1)\";\n          const displayLabel = labelMap[name] || name;\n\n          return (\n            <div\n              key={`item-${index}`}\n              className=\"flex items-center justify-between gap-3\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <div\n                  className=\"size-2 rounded-xs\"\n                  style={{ backgroundColor: color }}\n                />\n                <span className=\"text-muted-foreground\">{displayLabel}</span>\n              </div>\n              <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                {valueFormatter(value)}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/coin-selector.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { CheckIcon, ChevronDownIcon } from \"lucide-react\";\nimport { useId, useState } from \"react\";\n\nconst coins = [\n  {\n    value: \"TRX\",\n    name: \"Tronix\",\n    icon: \"https://raw.githubusercontent.com/origin-space/origin-images/refs/heads/main/exp5/coin-01_tidmpi.svg\",\n  },\n  {\n    value: \"TOK\",\n    name: \"Turbo Koin\",\n    icon: \"https://raw.githubusercontent.com/origin-space/origin-images/refs/heads/main/exp5/coin-02_a6ineb.svg\",\n  },\n  {\n    value: \"SAP\",\n    name: \"Swap\",\n    icon: \"https://raw.githubusercontent.com/origin-space/origin-images/refs/heads/main/exp5/coin-03_w8kee9.svg\",\n  },\n  {\n    value: \"SUV\",\n    name: \"SuvFi\",\n    icon: \"https://raw.githubusercontent.com/origin-space/origin-images/refs/heads/main/exp5/coin-04_hfq2hc.svg\",\n  },\n];\n\ninterface CoinSelectorProps {\n  defaultValue?: string;\n}\n\nexport default function CoinSelector({ defaultValue }: CoinSelectorProps) {\n  const id = useId();\n  const [open, setOpen] = useState<boolean>(false);\n  const [value, setValue] = useState<string>(defaultValue || \"\");\n\n  return (\n    <div>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            id={id}\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"p-2 pe-3 h-9 rounded-full border-border bg-background hover:bg-background\"\n          >\n            {value ? (\n              <span className=\"flex min-w-0 items-center gap-2\">\n                {(() => {\n                  const selectedCoin = coins.find(\n                    (coin) => coin.value === value,\n                  );\n                  return (\n                    <>\n                      <img\n                        src={selectedCoin?.icon}\n                        alt={selectedCoin?.name}\n                        className=\"size-5\"\n                      />\n                      <span className=\"truncate\">{selectedCoin?.value}</span>\n                    </>\n                  );\n                })()}\n              </span>\n            ) : (\n              <span className=\"flex min-w-0 items-center gap-2\">\n                <span className=\"size-5 rounded-full bg-muted flex items-center justify-center\">\n                  <ChevronDownIcon\n                    size={12}\n                    className=\"text-muted-foreground\"\n                  />\n                </span>\n                <span className=\"text-muted-foreground text-sm\">\n                  Select coin\n                </span>\n              </span>\n            )}\n            <ChevronDownIcon\n              size={16}\n              className=\"text-muted-foreground/80 shrink-0\"\n              aria-hidden=\"true\"\n            />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          className=\"max-w-48 min-w-[var(--radix-popper-anchor-width)] p-0\"\n          align=\"end\"\n        >\n          <Command\n            filter={(value, search) => {\n              if (!search) return 1;\n              const item = coins.find((coin) => coin.value === value);\n              if (!item) return 0;\n\n              const nameMatch = item.name\n                .toLowerCase()\n                .includes(search.toLowerCase());\n              const valueMatch = item.value\n                .toLowerCase()\n                .includes(search.toLowerCase());\n\n              return nameMatch || valueMatch ? 1 : 0;\n            }}\n          >\n            <CommandInput placeholder=\"Search coin...\" className=\"h-9\" />\n            <CommandList>\n              <CommandEmpty>No coin found.</CommandEmpty>\n              <CommandGroup className=\"p-1\">\n                {coins.map((coin) => (\n                  <CommandItem\n                    key={coin.value}\n                    value={coin.value}\n                    onSelect={(currentValue) => {\n                      setValue(currentValue);\n                      setOpen(false);\n                    }}\n                  >\n                    <img\n                      src={coin.icon}\n                      alt={coin.name}\n                      className=\"size-5\"\n                      width={20}\n                      height={20}\n                    />\n                    <span className=\"truncate\">\n                      {coin.name} ({coin.value})\n                    </span>\n                    {value === coin.value && (\n                      <CheckIcon\n                        size={16}\n                        className=\"ms-auto text-muted-foreground/80\"\n                      />\n                    )}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/period-selector.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { RiMoreFill } from \"@remixicon/react\";\nimport { useState } from \"react\";\n\nexport default function Component() {\n  const [period, setPeriod] = useState(\"1\");\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          size=\"icon\"\n          variant=\"outline\"\n          className=\"rounded-full border-border/80 bg-background hover:bg-background text-muted-foreground/80 hover:text-foreground aria-expanded:text-foreground\"\n          aria-label=\"Open edit menu\"\n        >\n          <RiMoreFill className=\"size-4.5\" size={18} aria-hidden=\"true\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-fit min-w-28\">\n        <DropdownMenuRadioGroup value={period} onValueChange={setPeriod}>\n          <DropdownMenuRadioItem value=\"1\">1 week</DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"2\">1 month</DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"3\">1 year</DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/sidebar.tsx",
      "content": "\"use client\";\n\nimport Link from \"next/link\";\nimport { useScramble } from \"use-scramble\";\n\ninterface MarketLink {\n  id: string;\n  base: string;\n  quote: string;\n  value: number;\n  isPositive: boolean;\n}\n\nexport function Sidebar() {\n  const links: MarketLink[] = [\n    {\n      id: \"sap-tok\",\n      base: \"SAP\",\n      quote: \"TOK\",\n      value: 12089,\n      isPositive: true,\n    },\n    {\n      id: \"map-tok\",\n      base: \"MAP\",\n      quote: \"TOK\",\n      value: 88749,\n      isPositive: true,\n    },\n    {\n      id: \"btk-tok\",\n      base: \"BTK\",\n      quote: \"TOK\",\n      value: 12921,\n      isPositive: false,\n    },\n    { id: \"wap-tok\", base: \"WAP\", quote: \"TOK\", value: 4982, isPositive: true },\n    {\n      id: \"lup-tok\",\n      base: \"LUP\",\n      quote: \"TOK\",\n      value: 10801,\n      isPositive: true,\n    },\n    {\n      id: \"suv-tok\",\n      base: \"SUV\",\n      quote: \"TOK\",\n      value: 1047,\n      isPositive: false,\n    },\n    { id: \"ark-tok\", base: \"ARK\", quote: \"TOK\", value: 1994, isPositive: true },\n  ];\n\n  // Format number with commas\n  const formatValue = (value: number): string => {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  return (\n    <aside className=\"md:-order-1 dark md:w-60 rounded-3xl shadow-2xl bg-sidebar text-foreground p-5 flex flex-col gap-4 border border-transparent dark:border-border/64\">\n      {/* Logo */}\n      <div className=\"mb-4\">\n        <Link href=\"/\">\n          <span className=\"sr-only\">Logo</span>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"41\"\n            height=\"32\"\n            fill=\"none\"\n          >\n            <path\n              fill=\"#D4D4D8\"\n              d=\"M13.53 1.641h17.287l-12.71 18.85H.82L13.53 1.64Z\"\n            />\n            <path\n              fill=\"#D4D4D8\"\n              fillOpacity=\".32\"\n              d=\"m14.286 22.238-4.923 7.3H27.47l12.71-18.85H26.815l-7.787 11.55h-4.743Z\"\n            />\n          </svg>\n        </Link>\n      </div>\n      {/* Navigation menu */}\n      <div className=\"flex-1\">\n        <div className=\"uppercase font-medium text-xs text-muted-foreground/64 mb-2\">\n          Live market\n        </div>\n        <nav>\n          <ul className=\"text-[13px] font-semibold divide-y divide-border/64\">\n            {links.map((link) => (\n              <li key={link.id}>\n                <ScrambleLink link={link} formatValue={formatValue} />\n              </li>\n            ))}\n            <li>\n              <Link\n                className=\"flex justify-end text-muted-foreground hover:text-foreground transition-colors gap-2 py-2\"\n                href=\"#\"\n              >\n                MORE\n              </Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n      {/* Market sentiment */}\n      <div>\n        <div className=\"uppercase font-medium text-xs text-muted-foreground/64 mb-4\">\n          Market sentiment\n        </div>\n        <div className=\"flex items-center text-[13px] font-semibold gap-2 mb-2\">\n          <div className=\"text-emerald-500\">27%</div>\n          <div\n            className=\"h-1.5 flex items-center gap-1 flex-1\"\n            aria-hidden=\"true\"\n          >\n            <div\n              className=\"h-full bg-emerald-500 rounded-full\"\n              style={{ width: \"27%\" }}\n            ></div>\n            <div\n              className=\"h-full bg-rose-500 rounded-full\"\n              style={{ width: \"73%\" }}\n            ></div>\n          </div>\n          <div className=\"text-rose-500\">73%</div>\n        </div>\n        <div className=\"text-[13px] flex justify-between text-muted-foreground/64\">\n          <div>Bullish</div>\n          <div>Bearish</div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n\ninterface ScrambleLinkProps {\n  link: MarketLink;\n  formatValue: (value: number) => string;\n}\n\nfunction ScrambleLink({ link, formatValue }: ScrambleLinkProps) {\n  const { ref: pairRef, replay: replayPair } = useScramble({\n    text: `${link.base} : ${link.quote}`,\n    speed: 1,\n    step: 1,\n    scramble: 4,\n    seed: 0,\n    chance: 1,\n    range: [65, 90],\n    overdrive: false,\n  });\n\n  const { ref: valueRef, replay: replayValue } = useScramble({\n    text: formatValue(link.value),\n    speed: 0.6,\n    step: 1,\n    scramble: 4,\n    seed: 0,\n    chance: 1,\n    range: [48, 57],\n    overdrive: false,\n  });\n\n  const handleScramble = () => {\n    replayPair();\n    replayValue();\n  };\n\n  return (\n    <Link\n      className=\"flex items-center justify-between gap-2 py-2\"\n      href=\"#\"\n      onClick={handleScramble}\n      onMouseEnter={handleScramble}\n      onFocus={handleScramble}\n    >\n      <span ref={pairRef}></span>\n      <span aria-hidden=\"true\">&nbsp;</span>\n      <span\n        ref={valueRef}\n        className={link.isPositive ? \"text-emerald-500\" : \"text-rose-500\"}\n      ></span>\n    </Link>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/theme-toggle.tsx",
      "content": "\"use client\";\n\nimport { RiMoonClearLine, RiSunLine } from \"@remixicon/react\";\nimport { useTheme } from \"next-themes\";\nimport { useId, useState } from \"react\";\n\nexport default function ThemeToggle() {\n  const id = useId();\n  const { theme, setTheme } = useTheme();\n  const [system, setSystem] = useState(false);\n\n  const smartToggle = () => {\n    const prefersDarkScheme = window.matchMedia(\n      \"(prefers-color-scheme: dark)\",\n    ).matches;\n    if (theme === \"system\") {\n      setTheme(prefersDarkScheme ? \"light\" : \"dark\");\n      setSystem(false);\n    } else if (\n      (theme === \"light\" && !prefersDarkScheme) ||\n      (theme === \"dark\" && prefersDarkScheme)\n    ) {\n      setTheme(theme === \"light\" ? \"dark\" : \"light\");\n      setSystem(false);\n    } else {\n      setTheme(\"system\");\n      setSystem(true);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col justify-center\">\n      <input\n        type=\"checkbox\"\n        name=\"theme-toggle\"\n        id={id}\n        className=\"peer sr-only\"\n        checked={system}\n        onChange={smartToggle}\n        aria-label=\"Toggle dark mode\"\n      />\n      <label\n        className=\"text-muted-foreground hover:text-foreground/80 rounded peer-focus-visible:border-ring peer-focus-visible:ring-ring/50 relative inline-flex size-8 cursor-pointer items-center justify-center transition-[color,box-shadow] outline-none peer-focus-visible:ring-[3px]\"\n        htmlFor={id}\n        aria-hidden=\"true\"\n      >\n        <RiSunLine className=\"dark:hidden\" size={20} aria-hidden=\"true\" />\n        <RiMoonClearLine\n          className=\"hidden dark:block\"\n          size={20}\n          aria-hidden=\"true\"\n        />\n        <span className=\"sr-only\">Switch to system/light/dark version</span>\n      </label>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/button.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/card.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-[data-slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/chart.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as RechartsPrimitive from \"recharts\";\n\nimport { cn } from \"@/lib/utils\";\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\");\n  }\n\n  return context;\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  config: ChartConfig;\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >[\"children\"];\n}) {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color,\n  );\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join(\"\\n\")}\n}\n`,\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = \"dot\",\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<\"div\"> & {\n    hideLabel?: boolean;\n    hideIndicator?: boolean;\n    indicator?: \"line\" | \"dot\" | \"dashed\";\n    nameKey?: string;\n    labelKey?: string;\n  }) {\n  const { config } = useChart();\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null;\n    }\n\n    const [item] = payload;\n    const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`;\n    const itemConfig = getPayloadConfigFromPayload(config, item, key);\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label;\n\n    if (labelFormatter) {\n      return (\n        <div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      );\n    }\n\n    if (!value) {\n      return null;\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>;\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ]);\n\n  if (!active || !payload?.length) {\n    return null;\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\";\n\n  return (\n    <div\n      className={cn(\n        \"bg-popover text-popover-foreground grid min-w-32 items-start gap-1.5 rounded-lg border px-3 py-1.5 text-xs\",\n        className,\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || \"value\"}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n          const indicatorColor = color || item.payload.fill || item.color;\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                \"[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5\",\n                indicator === \"dot\" && \"items-center\",\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          \"shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)\",\n                          {\n                            \"h-2.5 w-2.5\": indicator === \"dot\",\n                            \"w-1\": indicator === \"line\",\n                            \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                              indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          },\n                        )}\n                        style={\n                          {\n                            \"--color-bg\": indicatorColor,\n                            \"--color-border\": indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      \"flex flex-1 justify-between leading-none gap-3\",\n                      nestLabel ? \"items-end\" : \"items-center\",\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey,\n}: React.ComponentProps<\"div\"> &\n  Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n    hideIcon?: boolean;\n    nameKey?: string;\n  }) {\n  const { config } = useChart();\n\n  if (!payload?.length) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className,\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              \"[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3\",\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string,\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string;\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config];\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/command.tsx",
      "content": "\"use client\";\n\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { SearchIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        \"bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CommandDialog({\n  title = \"Command Palette\",\n  description = \"Search for a command to run...\",\n  children,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string;\n  description?: string;\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent className=\"overflow-hidden p-0 sm:max-w-lg [&>button:last-child]:hidden\">\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-3 [&_[cmdk-item]]:py-2\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n      <SearchIcon size={20} className=\"text-muted-foreground me-3\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input-wrapper\"\n        className={cn(\n          \"placeholder:text-muted-foreground/70 flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\",\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  );\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\"max-h-80 overflow-x-hidden overflow-y-auto\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  );\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        \"text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-2 [&_[cmdk-group-heading]]:px-3 [&_[cmdk-group-heading]]:py-2 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn(\"bg-border -mx-1 h-px\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground relative flex cursor-default items-center gap-3 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <kbd\n      data-slot=\"command-shortcut\"\n      className={cn(\n        \"bg-background text-muted-foreground/70 ms-auto -me-1 inline-flex h-5 max-h-full items-center rounded border px-1 font-[inherit] text-[0.625rem] font-medium\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/dialog.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { XIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />;\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />;\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/dropdown-menu.tsx",
      "content": "\"use client\";\n\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype PointerDownEvent = Parameters<\n  NonNullable<DropdownMenuPrimitive.DropdownMenuContentProps[\"onPointerDown\"]>\n>[0];\ntype PointerDownOutsideEvent = Parameters<\n  NonNullable<\n    DropdownMenuPrimitive.DropdownMenuContentProps[\"onPointerDownOutside\"]\n  >\n>[0];\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />;\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  );\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  onPointerDown,\n  onPointerDownOutside,\n  onCloseAutoFocus,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  const isCloseFromMouse = React.useRef<boolean>(false);\n\n  const handlePointerDown = React.useCallback(\n    (e: PointerDownEvent) => {\n      isCloseFromMouse.current = true;\n      onPointerDown?.(e);\n    },\n    [onPointerDown],\n  );\n\n  const handlePointerDownOutside = React.useCallback(\n    (e: PointerDownOutsideEvent) => {\n      isCloseFromMouse.current = true;\n      onPointerDownOutside?.(e);\n    },\n    [onPointerDownOutside],\n  );\n\n  const handleCloseAutoFocus = React.useCallback(\n    (e: Event) => {\n      if (onCloseAutoFocus) {\n        return onCloseAutoFocus(e);\n      }\n\n      if (!isCloseFromMouse.current) {\n        return;\n      }\n\n      e.preventDefault();\n      isCloseFromMouse.current = false;\n    },\n    [onCloseAutoFocus],\n  );\n\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-40 overflow-hidden rounded-md border p-1 shadow-lg\",\n          className,\n        )}\n        onPointerDown={handlePointerDown}\n        onPointerDownOutside={handlePointerDownOutside}\n        onCloseAutoFocus={handleCloseAutoFocus}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  );\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  );\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean;\n  variant?: \"default\" | \"destructive\";\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon size={16} />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  );\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 ps-2 pe-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute right-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"text-muted-foreground/80\" size={16} />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  );\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"text-muted-foreground px-2 py-1.5 text-xs font-medium data-[inset]:pl-8\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <kbd\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"bg-background text-muted-foreground/70 ms-auto -me-1 inline-flex h-5 max-h-full items-center rounded border px-1 font-[inherit] text-[0.625rem] font-medium\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />;\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon\n        size={16}\n        className=\"text-muted-foreground/80 ml-auto\"\n      />\n    </DropdownMenuPrimitive.SubTrigger>\n  );\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-40 overflow-hidden rounded-md border p-1 shadow-lg\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/label.tsx",
      "content": "\"use client\";\n\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"text-foreground text-sm leading-4 font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Label };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/popover.tsx",
      "content": "\"use client\";\n\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />;\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />;\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  showArrow = false,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content> & {\n  showArrow?: boolean;\n}) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 rounded-md border p-4 shadow-md outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        {props.children}\n        {showArrow && (\n          <PopoverPrimitive.Arrow className=\"fill-popover -my-px drop-shadow-[0_1px_0_hsl(var(--border))]\" />\n        )}\n      </PopoverPrimitive.Content>\n    </PopoverPrimitive.Portal>\n  );\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />;\n}\n\nexport { Popover, PopoverAnchor, PopoverContent, PopoverTrigger };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/select.tsx",
      "content": "\"use client\";\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />;\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n}\n\nfunction SelectTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger>) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      className={cn(\n        \"border-input text-foreground data-[placeholder]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex h-9 w-full items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&>span]:line-clamp-1\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon\n          size={16}\n          className=\"text-muted-foreground/80 in-aria-invalid:text-destructive/80 shrink-0\"\n        />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"border-input bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-[min(24rem,var(--radix-select-content-available-height))] min-w-32 overflow-hidden rounded-md border shadow-lg [&_[role=group]]:py-1\",\n          position === \"popper\" &&\n            \"w-full min-w-[var(--radix-select-trigger-width)] data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" && \"h-[var(--radix-select-trigger-height)]\",\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  );\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\n        \"text-muted-foreground py-1.5 ps-8 pe-2 text-xs font-medium\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex w-full cursor-default items-center rounded py-1.5 ps-8 pe-2 text-sm outline-hidden select-none data-disabled:pointer-events-none data-disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute start-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon size={16} />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"text-muted-foreground/80 flex cursor-default items-center justify-center py-1\",\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon size={16} />\n    </SelectPrimitive.ScrollUpButton>\n  );\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"text-muted-foreground/80 flex cursor-default items-center justify-center py-1\",\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon size={16} />\n    </SelectPrimitive.ScrollDownButton>\n  );\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "hooks/use-mobile.ts",
      "content": "import * as React from \"react\";\n\nconst MOBILE_BREAKPOINT = 768;\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(\n    undefined,\n  );\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    };\n    mql.addEventListener(\"change\", onChange);\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    return () => mql.removeEventListener(\"change\", onChange);\n  }, []);\n\n  return !!isMobile;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "providers/theme-provider.tsx",
      "content": "\"use client\";\n\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from \"next-themes\";\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\n}\n",
      "type": "registry:file",
      "target": "providers/theme-provider.tsx"
    },
    {
      "path": "next.config.mjs",
      "content": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  assetPrefix: \"/exp5-static\",\n  transpilePackages: [\"@workspace/ui\"],\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'raw.githubusercontent.com',\n      },\n    ],    \n  },  \n}\n\nexport default nextConfig\n",
      "type": "registry:file",
      "target": "next.config.mjs"
    }
  ],
  "cssVars": {
    "theme": {
      "font-sans": "var(--font-sans), ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "font-mono": "var(--font-mono), ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace",
      "shadow-xs": "0 1px 1px rgba(0, 0, 0, 0.02), 0 1px 2px rgba(0, 0, 0, 0.05)",
      "shadow-sm": "0 1px 1px rgba(0, 0, 0, 0.03), 0 2px 2px rgba(0, 0, 0, 0.03), 0 2px 4px rgba(0, 0, 0, 0.03)",
      "shadow-md": "0 1px 1px rgba(0, 0, 0, 0.02), 0 2px 2px rgba(0, 0, 0, 0.02), 0 4px 4px rgba(0, 0, 0, 0.02), 0 8px 8px rgba(0, 0, 0, 0.02)",
      "shadow-lg": "0 1px 1px rgba(0, 0, 0, 0.02), 0 2px 2px rgba(0, 0, 0, 0.02), 0 4px 4px rgba(0, 0, 0, 0.02), 0 8px 8px rgba(0, 0, 0, 0.02), 0 16px 16px rgba(0, 0, 0, 0.02)",
      "shadow-xl": "0 1px 1px rgba(0, 0, 0, 0.02), 0 2px 2px rgba(0, 0, 0, 0.02), 0 4px 4px rgba(0, 0, 0, 0.02), 0 8px 8px rgba(0, 0, 0, 0.02), 0 16px 16px rgba(0, 0, 0, 0.02), 0 32px 32px rgba(0, 0, 0, 0.02)",
      "shadow-2xl": "0 1px 1px rgba(0, 0, 0, 0.02), 0 2px 2px rgba(0, 0, 0, 0.02), 0 4px 4px rgba(0, 0, 0, 0.02), 0 8px 8px rgba(0, 0, 0, 0.02), 0 16px 16px rgba(0, 0, 0, 0.02), 0 32px 32px rgba(0, 0, 0, 0.02), 0 64px 64px rgba(0, 0, 0, 0.02)"
    },
    "light": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.141 0.005 285.823)",
      "card": "oklch(1 0 0)",
      "card-foreground": "oklch(0.141 0.005 285.823)",
      "popover": "oklch(1 0 0)",
      "popover-foreground": "oklch(0.141 0.005 285.823)",
      "primary": "oklch(0.606 0.25 292.717)",
      "primary-foreground": "oklch(0.979 0.021 166.113)",
      "secondary": "oklch(0.967 0.001 286.375)",
      "secondary-foreground": "oklch(0.183 0.006 285.79)",
      "muted": "oklch(0.967 0.001 286.375)",
      "muted-foreground": "oklch(0.552 0.016 285.938)",
      "accent": "oklch(0.967 0.001 286.375)",
      "accent-foreground": "oklch(0.183 0.006 285.79)",
      "destructive": "oklch(0.637 0.237 25.331)",
      "destructive-foreground": "oklch(0.637 0.237 25.331)",
      "border": "oklch(0.92 0.004 286.32)",
      "input": "oklch(0.871 0.006 286.286)",
      "ring": "oklch(0.871 0.006 286.286)",
      "chart-1": "oklch(0.606 0.25 292.717)",
      "chart-2": "oklch(0.541 0.281 293.009)",
      "chart-3": "oklch(0.92 0.004 286.32)",
      "chart-4": "oklch(0.645 0.246 16.439)",
      "chart-5": "oklch(0.586 0.253 17.585)",
      "chart-6": "oklch(0.696 0.17 162.48)",
      "radius": "0.625rem",
      "sidebar": "oklch(0.985 0 0)",
      "sidebar-foreground": "oklch(0.37 0.013 285.805)",
      "sidebar-primary": "oklch(0.606 0.25 292.717)",
      "sidebar-primary-foreground": "oklch(0.985 0 0)",
      "sidebar-accent": "oklch(0.967 0.001 286.375)",
      "sidebar-accent-foreground": "oklch(0.21 0.006 285.885)",
      "sidebar-border": "oklch(0.92 0.004 286.32)",
      "sidebar-ring": "oklch(0.871 0.006 286.286)"
    },
    "dark": {
      "background": "oklch(0.227 0.006 285.93)",
      "foreground": "oklch(0.985 0 0)",
      "card": "oklch(0.227 0.006 285.93)",
      "card-foreground": "oklch(0.985 0 0)",
      "popover": "oklch(0.227 0.006 285.93)",
      "popover-foreground": "oklch(0.985 0 0)",
      "primary": "oklch(0.606 0.25 292.717)",
      "primary-foreground": "oklch(0.979 0.021 166.113)",
      "secondary": "oklch(0.274 0.006 286.033)",
      "secondary-foreground": "oklch(0.985 0 0)",
      "muted": "oklch(0.21 0.006 285.885)",
      "muted-foreground": "oklch(0.705 0.015 286.067)",
      "accent": "oklch(0.21 0.006 285.885)",
      "accent-foreground": "oklch(0.985 0 0)",
      "destructive": "oklch(0.637 0.237 25.331)",
      "destructive-foreground": "oklch(0.637 0.237 25.331)",
      "border": "oklch(0.323 0.0105 285.8)",
      "input": "oklch(0.323 0.0105 285.8)",
      "ring": "oklch(0.442 0.017 285.786)",
      "chart-1": "oklch(0.606 0.25 292.717)",
      "chart-2": "oklch(0.541 0.281 293.009)",
      "chart-3": "oklch(0.274 0.006 286.033)",
      "chart-4": "oklch(0.645 0.246 16.439)",
      "chart-5": "oklch(0.586 0.253 17.585)",
      "chart-6": "oklch(0.696 0.17 162.48)",
      "sidebar": "oklch(0.227 0.006 285.93)",
      "sidebar-foreground": "oklch(0.967 0.001 286.375)",
      "sidebar-primary": "oklch(0.606 0.25 292.717)",
      "sidebar-primary-foreground": "oklch(1 0 0)",
      "sidebar-accent": "oklch(0.274 0.006 286.033)",
      "sidebar-accent-foreground": "oklch(0.967 0.001 286.375)",
      "sidebar-border": "oklch(0.323 0.0105 285.8)",
      "sidebar-ring": "oklch(0.442 0.017 285.786)"
    }
  }
}