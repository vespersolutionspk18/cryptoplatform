{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "experiment-03",
  "type": "registry:style",
  "dependencies": [
    "@radix-ui/react-avatar",
    "@radix-ui/react-collapsible",
    "@radix-ui/react-dialog",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-label",
    "@radix-ui/react-popover",
    "@radix-ui/react-radio-group",
    "@radix-ui/react-separator",
    "@radix-ui/react-slot",
    "@radix-ui/react-switch",
    "@radix-ui/react-tooltip",
    "@remixicon/react",
    "date-fns",
    "react-day-picker",
    "recharts"
  ],
  "devDependencies": [
    "tw-animate-css"
  ],
  "files": [
    {
      "path": "app/layout.tsx",
      "content": "import { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst fontSans = Geist({\n  variable: \"--font-sans\",\n  subsets: [\"latin\"],\n});\n\nconst fontMono = Geist_Mono({\n  variable: \"--font-mono\",\n  subsets: [\"latin\"],\n});\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" className=\"dark scheme-only-dark\">\n      <body\n        className={`${fontSans.variable} ${fontMono.variable} font-sans antialiased`}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/layout.tsx"
    },
    {
      "path": "app/page.tsx",
      "content": "import type { Metadata } from \"next\";\n\nexport const metadata: Metadata = {\n  title: \"Experiment 03 - Crafted.is\",\n};\n\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  SidebarInset,\n  SidebarProvider,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar\";\nimport { Chart01 } from \"@/components/chart-01\";\nimport { Chart02 } from \"@/components/chart-02\";\nimport { Chart03 } from \"@/components/chart-03\";\nimport { Chart04 } from \"@/components/chart-04\";\nimport { Chart05 } from \"@/components/chart-05\";\nimport { Chart06 } from \"@/components/chart-06\";\nimport { ActionButtons } from \"@/components/action-buttons\";\n\nexport default function Page() {\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n      <SidebarInset>\n        <div className=\"px-4 md:px-6 lg:px-8 @container\">\n          <div className=\"w-full max-w-6xl mx-auto\">\n            <header className=\"flex flex-wrap gap-3 min-h-20 py-4 shrink-0 items-center transition-all ease-linear border-b\">\n              {/* Left side */}\n              <div className=\"flex flex-1 items-center gap-2\">\n                <SidebarTrigger className=\"-ms-1\" />\n                <div className=\"max-lg:hidden lg:contents\">\n                  <Separator\n                    orientation=\"vertical\"\n                    className=\"me-2 data-[orientation=vertical]:h-4\"\n                  />\n                  <Breadcrumb>\n                    <BreadcrumbList>\n                      <BreadcrumbItem className=\"hidden md:block\">\n                        <BreadcrumbLink href=\"#\">Home</BreadcrumbLink>\n                      </BreadcrumbItem>\n                      <BreadcrumbSeparator className=\"hidden md:block\" />\n                      <BreadcrumbItem>\n                        <BreadcrumbPage>Dashboard</BreadcrumbPage>\n                      </BreadcrumbItem>\n                    </BreadcrumbList>\n                  </Breadcrumb>\n                </div>\n              </div>\n              {/* Right side */}\n              <ActionButtons />\n            </header>\n            <div className=\"overflow-hidden\">\n              <div className=\"grid auto-rows-min @2xl:grid-cols-2 *:-ms-px *:-mt-px -m-px\">\n                <Chart01 />\n                <Chart02 />\n                <Chart03 />\n                <Chart04 />\n                <Chart05 />\n                <Chart06 />\n              </div>\n            </div>\n          </div>\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/dashboard/page.tsx"
    },
    {
      "path": "components/action-buttons.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport DatePicker from \"@/components/date-picker\";\nimport { RiExpandRightLine, RiAddLine } from \"@remixicon/react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\nexport function ActionButtons() {\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"flex gap-3\">\n      <DatePicker />\n      <TooltipProvider delayDuration={0}>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button variant=\"outline\" className=\"aspect-square max-lg:p-0\">\n              <RiExpandRightLine\n                className=\"lg:-ms-1 opacity-40 size-5\"\n                size={20}\n                aria-hidden=\"true\"\n              />\n              <span className=\"max-lg:sr-only\">Export</span>\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent className=\"lg:hidden\" hidden={isMobile}>\n            Export\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n      <TooltipProvider delayDuration={0}>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button className=\"aspect-square max-lg:p-0\">\n              <RiAddLine\n                className=\"lg:-ms-1 opacity-40 size-5\"\n                size={20}\n                aria-hidden=\"true\"\n              />\n              <span className=\"max-lg:sr-only\">Add Chart</span>\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent className=\"lg:hidden\" hidden={isMobile}>\n            Add Chart\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/app-sidebar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport Link from \"next/link\";\n\nimport { NavUser } from \"@/components/nav-user\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarGroupContent,\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuButton,\n} from \"@/components/ui/sidebar\";\nimport {\n  RiSlowDownLine,\n  RiLeafLine,\n  RiNavigationLine,\n  RiSpeakLine,\n  RiCodeSSlashLine,\n  RiGeminiLine,\n  RiLinksLine,\n  RiDatabase2Line,\n} from \"@remixicon/react\";\n\n// This is sample data.\nconst data = {\n  user: {\n    name: \"Mark Bannert\",\n    email: \"mark@bannert.com\",\n    avatar:\n      \"https://raw.githubusercontent.com/origin-space/origin-images/refs/heads/main/exp3/user_itiiaq.png\",\n  },\n  navMain: [\n    {\n      title: \"General\",\n      items: [\n        {\n          title: \"Dashboard\",\n          url: \"#\",\n          icon: RiSlowDownLine,\n          isActive: true,\n        },\n        {\n          title: \"Transactions\",\n          url: \"#\",\n          icon: RiLeafLine,\n        },\n        {\n          title: \"Metrics\",\n          url: \"#\",\n          icon: RiNavigationLine,\n        },\n        {\n          title: \"Security\",\n          url: \"#\",\n          icon: RiSpeakLine,\n        },\n        {\n          title: \"API\",\n          url: \"#\",\n          icon: RiCodeSSlashLine,\n        },\n        {\n          title: \"Quick Setup\",\n          url: \"#\",\n          icon: RiGeminiLine,\n        },\n        {\n          title: \"Payment Links\",\n          url: \"#\",\n          icon: RiLinksLine,\n        },\n        {\n          title: \"Archive\",\n          url: \"#\",\n          icon: RiDatabase2Line,\n        },\n      ],\n    },\n  ],\n};\n\nfunction SidebarLogo() {\n  const id = React.useId();\n  return (\n    <div className=\"flex gap-2 px-2 group-data-[collapsible=icon]:px-0 transition-[padding] duration-200 ease-in-out\">\n      <Link className=\"group/logo inline-flex\" href=\"/\">\n        <span className=\"sr-only\">Logo</span>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"36\"\n          height=\"36\"\n          viewBox=\"0 0 36 36\"\n          className=\"size-9 group-data-[collapsible=icon]:size-8 transition-[width,height] duration-200 ease-in-out\"\n        >\n          <path\n            fill={`url(#${id})`}\n            fillRule=\"evenodd\"\n            d=\"M12.972 2a6.806 6.806 0 0 0-4.813 1.993L2 10.153v2.819c0 1.991.856 3.783 2.22 5.028A6.788 6.788 0 0 0 2 23.028v2.82l6.16 6.159A6.806 6.806 0 0 0 18 31.78a6.806 6.806 0 0 0 9.841.226L34 25.847v-2.819A6.788 6.788 0 0 0 31.78 18 6.788 6.788 0 0 0 34 12.972v-2.82l-6.159-6.159A6.806 6.806 0 0 0 18 4.22 6.788 6.788 0 0 0 12.972 2Zm9.635 16a6.741 6.741 0 0 1-.226-.216L18 13.403l-4.381 4.381a6.741 6.741 0 0 1-.226.216c.077.07.152.142.226.216L18 22.597l4.381-4.381c.074-.074.15-.146.226-.216Zm-2.83 7.848v1.346a3.25 3.25 0 0 0 5.55 2.298l5.117-5.117v-1.347a3.25 3.25 0 0 0-5.549-2.298l-5.117 5.117Zm-3.555 0-5.117-5.118a3.25 3.25 0 0 0-5.55 2.298v1.347l5.118 5.117a3.25 3.25 0 0 0 5.55-2.298v-1.346Zm0-17.042v1.347l-5.117 5.117a3.25 3.25 0 0 1-5.55-2.298v-1.347l5.118-5.117a3.25 3.25 0 0 1 5.55 2.298Zm8.673 6.464-5.117-5.117V8.806a3.25 3.25 0 0 1 5.549-2.298l5.117 5.117v1.347a3.25 3.25 0 0 1-5.549 2.298Z\"\n            clipRule=\"evenodd\"\n          />\n          <defs>\n            <linearGradient\n              id={id}\n              x1=\"18\"\n              x2=\"18\"\n              y1=\"2\"\n              y2=\"34\"\n              gradientUnits=\"userSpaceOnUse\"\n            >\n              <stop stopColor=\"#F4F4F5\" />\n              <stop offset=\"1\" stopColor=\"#A1A1AA\" />\n            </linearGradient>\n          </defs>\n        </svg>\n      </Link>\n    </div>\n  );\n}\n\nexport function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\n  return (\n    <Sidebar collapsible=\"icon\" variant=\"inset\" {...props}>\n      <SidebarHeader className=\"h-16 max-md:mt-2 mb-2 justify-center\">\n        <SidebarLogo />\n      </SidebarHeader>\n      <SidebarContent className=\"-mt-2\">\n        {data.navMain.map((item) => (\n          <SidebarGroup key={item.title}>\n            <SidebarGroupLabel className=\"uppercase text-muted-foreground/65\">\n              {item.title}\n            </SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {item.items.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton\n                      asChild\n                      className=\"group/menu-button group-data-[collapsible=icon]:px-[5px]! font-medium gap-3 h-9 [&>svg]:size-auto\"\n                      tooltip={item.title}\n                      isActive={item.isActive}\n                    >\n                      <a href={item.url}>\n                        {item.icon && (\n                          <item.icon\n                            className=\"text-muted-foreground/65 group-data-[active=true]/menu-button:text-primary\"\n                            size={22}\n                            aria-hidden=\"true\"\n                          />\n                        )}\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        ))}\n      </SidebarContent>\n      <SidebarFooter>\n        <NavUser user={data.user} />\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/chart-01.tsx",
      "content": "\"use client\";\n\nimport { useId, useState } from \"react\";\nimport { Bar, BarChart, CartesianGrid, XAxis, YAxis } from \"recharts\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n} from \"@/components/ui/chart\";\nimport { CustomTooltipContent } from \"@/components/charts-extra\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\n\nconst mrrData = [\n  { month: \"Jan 2025\", actual: 300000, projected: 120000 },\n  { month: \"Feb 2025\", actual: 420000, projected: 180000 },\n  { month: \"Mar 2025\", actual: 500000, projected: 90000 },\n  { month: \"Apr 2025\", actual: 630000, projected: 110000 },\n  { month: \"May 2025\", actual: 710000, projected: 120000 },\n  { month: \"Jun 2025\", actual: 800000, projected: 100000 },\n  { month: \"Jul 2025\", actual: 900000, projected: 140000 },\n  { month: \"Aug 2025\", actual: 1010000, projected: 120000 },\n  { month: \"Sep 2025\", actual: 1090000, projected: 130000 },\n  { month: \"Oct 2025\", actual: 1180000, projected: 110000 },\n  { month: \"Nov 2025\", actual: 1280000, projected: 130000 },\n  { month: \"Dec 2025\", actual: 1380000, projected: 100000 },\n];\n\nconst arrData = [\n  { month: \"Jan 2025\", actual: 3600000, projected: 1440000 },\n  { month: \"Feb 2025\", actual: 4200000, projected: 1800000 },\n  { month: \"Mar 2025\", actual: 5000000, projected: 900000 },\n  { month: \"Apr 2025\", actual: 6300000, projected: 1100000 },\n  { month: \"May 2025\", actual: 7100000, projected: 1200000 },\n  { month: \"Jun 2025\", actual: 8000000, projected: 1000000 },\n  { month: \"Jul 2025\", actual: 9000000, projected: 1400000 },\n  { month: \"Aug 2025\", actual: 10100000, projected: 1200000 },\n  { month: \"Sep 2025\", actual: 10900000, projected: 1300000 },\n  { month: \"Oct 2025\", actual: 11800000, projected: 1100000 },\n  { month: \"Nov 2025\", actual: 12800000, projected: 1300000 },\n  { month: \"Dec 2025\", actual: 16560000, projected: 1200000 },\n];\n\nconst chartConfig = {\n  actual: {\n    label: \"Actual\",\n    color: \"var(--chart-1)\",\n  },\n  projected: {\n    label: \"Projected\",\n    color: \"var(--chart-3)\",\n  },\n} satisfies ChartConfig;\n\nexport function Chart01() {\n  const id = useId();\n  const [selectedValue, setSelectedValue] = useState(\"off\");\n\n  const chartData = selectedValue === \"on\" ? arrData : mrrData;\n\n  const firstMonth = chartData[0]?.month as string;\n  const lastMonth = chartData[chartData.length - 1]?.month as string;\n\n  return (\n    <Card className=\"gap-4\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between gap-2\">\n          <div className=\"space-y-0.5\">\n            <CardTitle>Recurring Revenue</CardTitle>\n            <div className=\"flex items-start gap-2\">\n              <div className=\"font-semibold text-2xl\">\n                {selectedValue === \"off\" ? \"$1,439,346\" : \"$8,272,152\"}\n              </div>\n              <Badge className=\"mt-1.5 bg-emerald-500/24 text-emerald-500 border-none\">\n                {selectedValue === \"off\" ? \"+48.1%\" : \"+52.7%\"}\n              </Badge>\n            </div>\n          </div>\n          <div className=\"bg-black/50 inline-flex h-7 rounded-lg p-0.5 shrink-0\">\n            <RadioGroup\n              value={selectedValue}\n              onValueChange={setSelectedValue}\n              className=\"group text-xs after:border after:border-border after:bg-background has-focus-visible:after:border-ring has-focus-visible:after:ring-ring/50 relative inline-grid grid-cols-[1fr_1fr] items-center gap-0 font-medium after:absolute after:inset-y-0 after:w-1/2 after:rounded-md after:shadow-xs after:transition-[translate,box-shadow] after:duration-300 after:[transition-timing-function:cubic-bezier(0.16,1,0.3,1)] has-focus-visible:after:ring-[3px] data-[state=off]:after:translate-x-0 data-[state=on]:after:translate-x-full\"\n              data-state={selectedValue}\n            >\n              <label className=\"group-data-[state=on]:text-muted-foreground/50 relative z-10 inline-flex h-full min-w-8 cursor-pointer items-center justify-center px-2 whitespace-nowrap transition-colors select-none\">\n                MRR\n                <RadioGroupItem\n                  id={`${id}-1`}\n                  value=\"off\"\n                  className=\"sr-only\"\n                />\n              </label>\n              <label className=\"group-data-[state=off]:text-muted-foreground/50 relative z-10 inline-flex h-full min-w-8 cursor-pointer items-center justify-center px-2 whitespace-nowrap transition-colors select-none\">\n                ARR\n                <RadioGroupItem id={`${id}-2`} value=\"on\" className=\"sr-only\" />\n              </label>\n            </RadioGroup>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer\n          config={chartConfig}\n          className=\"aspect-auto h-60 w-full [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-[var(--chart-1)]/15\"\n        >\n          <BarChart\n            accessibilityLayer\n            data={chartData}\n            maxBarSize={20}\n            margin={{ left: -12, right: 12, top: 12 }}\n          >\n            <defs>\n              <linearGradient id={`${id}-gradient`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"0%\" stopColor=\"var(--chart-1)\" />\n                <stop offset=\"100%\" stopColor=\"var(--chart-2)\" />\n              </linearGradient>\n            </defs>\n            <CartesianGrid\n              vertical={false}\n              strokeDasharray=\"2 2\"\n              stroke=\"var(--border)\"\n            />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              tickMargin={12}\n              ticks={[firstMonth, lastMonth]}\n              stroke=\"var(--border)\"\n            />\n            <YAxis\n              tickLine={false}\n              axisLine={false}\n              tickFormatter={(value) =>\n                value === 0 ? \"$0\" : `$${(value / 1000000).toFixed(1)}M`\n              }\n            />\n            <ChartTooltip\n              content={\n                <CustomTooltipContent\n                  colorMap={{\n                    actual: \"var(--chart-1)\",\n                    projected: \"var(--chart-3)\",\n                  }}\n                  labelMap={{\n                    actual: \"Actual\",\n                    projected: \"Projected\",\n                  }}\n                  dataKeys={[\"actual\", \"projected\"]}\n                  valueFormatter={(value) => `$${value.toLocaleString()}`}\n                />\n              }\n            />\n            <Bar dataKey=\"actual\" fill={`url(#${id}-gradient)`} stackId=\"a\" />\n            <Bar\n              dataKey=\"projected\"\n              fill=\"var(--color-projected)\"\n              stackId=\"a\"\n            />\n          </BarChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/chart-02.tsx",
      "content": "\"use client\";\n\nimport { useId } from \"react\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  Rectangle,\n  XAxis,\n  YAxis,\n} from \"recharts\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n} from \"@/components/ui/chart\";\nimport { CustomTooltipContent } from \"@/components/charts-extra\";\nimport { Badge } from \"@/components/ui/badge\";\n// Subscriber data for the last 12 months\nconst chartData = [\n  { month: \"Jan 2025\", actual: 5000, projected: 2000 },\n  { month: \"Feb 2025\", actual: 10000, projected: 8000 },\n  { month: \"Mar 2025\", actual: 15000, projected: 22000 },\n  { month: \"Apr 2025\", actual: 22000, projected: 15000 },\n  { month: \"May 2025\", actual: 20000, projected: 25000 },\n  { month: \"Jun 2025\", actual: 35000, projected: 45000 },\n  { month: \"Jul 2025\", actual: 30000, projected: 25000 },\n  { month: \"Aug 2025\", actual: 60000, projected: 70000 },\n  { month: \"Sep 2025\", actual: 65000, projected: 75000 },\n  { month: \"Oct 2025\", actual: 60000, projected: 80000 },\n  { month: \"Nov 2025\", actual: 70000, projected: 65000 },\n  { month: \"Dec 2025\", actual: 78000, projected: 75000 },\n];\n\nconst chartConfig = {\n  actual: {\n    label: \"Actual\",\n    color: \"var(--chart-1)\",\n  },\n  projected: {\n    label: \"Projected\",\n    color: \"var(--chart-3)\",\n  },\n} satisfies ChartConfig;\n\ninterface CustomCursorProps {\n  fill?: string;\n  pointerEvents?: string;\n  height?: number;\n  points?: Array<{ x: number; y: number }>;\n  className?: string;\n}\n\nfunction CustomCursor(props: CustomCursorProps) {\n  const { fill, pointerEvents, height, points, className } = props;\n\n  if (!points || points.length === 0) {\n    return null;\n  }\n\n  const { x, y } = points[0]!;\n  return (\n    <>\n      <Rectangle\n        x={x - 12}\n        y={y}\n        fill={fill}\n        pointerEvents={pointerEvents}\n        width={24}\n        height={height}\n        className={className}\n        type=\"linear\"\n      />\n      <Rectangle\n        x={x - 1}\n        y={y}\n        fill={fill}\n        pointerEvents={pointerEvents}\n        width={1}\n        height={height}\n        className=\"recharts-tooltip-inner-cursor\"\n        type=\"linear\"\n      />\n    </>\n  );\n}\n\nexport function Chart02() {\n  const id = useId();\n\n  return (\n    <Card className=\"gap-4\">\n      <CardHeader>\n        <div className=\"flex flex-wrap items-center justify-between gap-3\">\n          <div className=\"space-y-0.5\">\n            <CardTitle>Active Subscribers</CardTitle>\n            <div className=\"flex items-start gap-2\">\n              <div className=\"font-semibold text-2xl\">142,869</div>\n              <Badge className=\"mt-1.5 bg-emerald-500/24 text-emerald-500 border-none\">\n                +24.7%\n              </Badge>\n            </div>\n          </div>\n          <div className=\"flex flex-wrap items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div\n                aria-hidden=\"true\"\n                className=\"size-1.5 shrink-0 rounded-xs bg-chart-1\"\n              ></div>\n              <div className=\"text-[13px]/3 text-muted-foreground/50\">\n                Actual\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div\n                aria-hidden=\"true\"\n                className=\"size-1.5 shrink-0 rounded-xs bg-chart-3\"\n              ></div>\n              <div className=\"text-[13px]/3 text-muted-foreground/50\">\n                Projected\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer\n          config={chartConfig}\n          className=\"aspect-auto h-60 w-full [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-(--chart-1)/15 [&_.recharts-rectangle.recharts-tooltip-inner-cursor]:fill-white/20\"\n        >\n          <LineChart\n            accessibilityLayer\n            data={chartData}\n            margin={{ left: -12, right: 12, top: 12 }}\n          >\n            <defs>\n              <linearGradient id={`${id}-gradient`} x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n                <stop offset=\"0%\" stopColor=\"var(--chart-2)\" />\n                <stop offset=\"100%\" stopColor=\"var(--chart-1)\" />\n              </linearGradient>\n            </defs>\n            <CartesianGrid\n              vertical={false}\n              strokeDasharray=\"2 2\"\n              stroke=\"var(--border)\"\n            />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              tickMargin={12}\n              tickFormatter={(value) => value.slice(0, 3)}\n              stroke=\"var(--border)\"\n            />\n            <YAxis\n              axisLine={false}\n              tickLine={false}\n              tickFormatter={(value) => {\n                if (value === 0) return \"$0\";\n                return `${value / 1000}k`;\n              }}\n              interval=\"preserveStartEnd\"\n            />\n            <Line\n              type=\"linear\"\n              dataKey=\"projected\"\n              stroke=\"var(--color-projected)\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n            />\n            <ChartTooltip\n              content={\n                <CustomTooltipContent\n                  colorMap={{\n                    actual: \"var(--chart-1)\",\n                    projected: \"var(--chart-3)\",\n                  }}\n                  labelMap={{\n                    actual: \"Actual\",\n                    projected: \"Projected\",\n                  }}\n                  dataKeys={[\"actual\", \"projected\"]}\n                  valueFormatter={(value) => `$${value.toLocaleString()}`}\n                />\n              }\n              cursor={<CustomCursor fill=\"var(--chart-1)\" />}\n            />\n            <Line\n              type=\"linear\"\n              dataKey=\"actual\"\n              stroke={`url(#${id}-gradient)`}\n              strokeWidth={2}\n              dot={false}\n              activeDot={{\n                r: 5,\n                fill: \"var(--chart-1)\",\n                stroke: \"var(--background)\",\n                strokeWidth: 2,\n              }}\n            />\n          </LineChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/chart-03.tsx",
      "content": "\"use client\";\n\nimport { useId } from \"react\";\nimport { Bar, BarChart, CartesianGrid, XAxis, YAxis } from \"recharts\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n} from \"@/components/ui/chart\";\nimport { CustomTooltipContent } from \"@/components/charts-extra\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst chartData = [\n  { month: \"Jan 2025\", revenues: 750000, churn: -150000 },\n  { month: \"Feb 2025\", revenues: 900000, churn: -70000 },\n  { month: \"Mar 2025\", revenues: 950000, churn: -220000 },\n  { month: \"Apr 2025\", revenues: 1350000, churn: -180000 },\n  { month: \"May 2025\", revenues: 650000, churn: -80000 },\n  { month: \"Jun 2025\", revenues: 1450000, churn: -280000 },\n  { month: \"Jul 2025\", revenues: 950000, churn: -150000 },\n  { month: \"Aug 2025\", revenues: 500000, churn: -120000 },\n  { month: \"Sep 2025\", revenues: 1300000, churn: -280000 },\n  { month: \"Oct 2025\", revenues: 1050000, churn: -40000 },\n  { month: \"Nov 2025\", revenues: 1550000, churn: -120000 },\n  { month: \"Dec 2025\", revenues: 900000, churn: -200000 },\n];\n\nconst chartConfig = {\n  revenues: {\n    label: \"Revenues\",\n    color: \"var(--chart-1)\",\n  },\n  churn: {\n    label: \"Churn\",\n    color: \"var(--chart-4)\",\n  },\n} satisfies ChartConfig;\n\nexport function Chart03() {\n  const id = useId();\n\n  // Get first and last month with type assertions\n  const firstMonth = chartData[0]?.month as string;\n  const lastMonth = chartData[chartData.length - 1]?.month as string;\n\n  return (\n    <Card className=\"gap-4\">\n      <CardHeader>\n        <div className=\"flex flex-wrap items-center justify-between gap-3\">\n          <div className=\"space-y-0.5\">\n            <CardTitle>MRR Growth</CardTitle>\n            <div className=\"flex items-start gap-2\">\n              <div className=\"font-semibold text-2xl\">$1,426,297</div>\n              <Badge className=\"mt-1.5 bg-emerald-500/24 text-emerald-500 border-none\">\n                +4.6%\n              </Badge>\n            </div>\n          </div>\n          <div className=\"flex flex-wrap items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div\n                aria-hidden=\"true\"\n                className=\"size-1.5 shrink-0 rounded-xs bg-chart-1\"\n              ></div>\n              <div className=\"text-[13px]/3 text-muted-foreground/50\">\n                Revenues\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div\n                aria-hidden=\"true\"\n                className=\"size-1.5 shrink-0 rounded-xs bg-chart-4\"\n              ></div>\n              <div className=\"text-[13px]/3 text-muted-foreground/50\">\n                Churn\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer\n          config={chartConfig}\n          className=\"aspect-auto h-60 w-full [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-[var(--chart-1)]/15\"\n        >\n          <BarChart\n            accessibilityLayer\n            data={chartData}\n            stackOffset=\"sign\"\n            maxBarSize={20}\n            margin={{ left: -12, right: 12, top: 12 }}\n          >\n            <defs>\n              <linearGradient id={`${id}-gradient`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"0%\" stopColor=\"var(--chart-1)\" />\n                <stop offset=\"100%\" stopColor=\"var(--chart-2)\" />\n              </linearGradient>\n            </defs>\n            <CartesianGrid\n              vertical={false}\n              strokeDasharray=\"2 2\"\n              stroke=\"var(--border)\"\n            />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              tickMargin={12}\n              ticks={[firstMonth, lastMonth]}\n              stroke=\"var(--border)\"\n            />\n            <YAxis\n              tickLine={false}\n              axisLine={false}\n              tickFormatter={(value) =>\n                value === 0 ? \"$0\" : `$${(value / 1000000).toFixed(1)}M`\n              }\n            />\n            <ChartTooltip\n              content={\n                <CustomTooltipContent\n                  colorMap={{\n                    revenues: \"var(--chart-1)\",\n                    churn: \"var(--chart-4)\",\n                  }}\n                  labelMap={{\n                    revenues: \"Revenues\",\n                    churn: \"Churn\",\n                  }}\n                  dataKeys={[\"revenues\", \"churn\"]}\n                  valueFormatter={(value) => `$${value.toLocaleString()}`}\n                />\n              }\n            />\n            <Bar dataKey=\"revenues\" fill={`url(#${id}-gradient)`} stackId=\"a\" />\n            <Bar dataKey=\"churn\" fill=\"var(--color-churn)\" stackId=\"a\" />\n          </BarChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/chart-04.tsx",
      "content": "\"use client\";\n\nimport { useId } from \"react\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  Rectangle,\n  XAxis,\n  YAxis,\n} from \"recharts\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n} from \"@/components/ui/chart\";\nimport { CustomTooltipContent } from \"@/components/charts-extra\";\nimport { Badge } from \"@/components/ui/badge\";\n// Subscriber data for the last 12 months\nconst chartData = [\n  { month: \"Jan 2025\", actual: 1000, projected: 500 },\n  { month: \"Feb 2025\", actual: 3500, projected: 2000 },\n  { month: \"Mar 2025\", actual: 10000, projected: 3500 },\n  { month: \"Apr 2025\", actual: 9000, projected: 5000 },\n  { month: \"May 2025\", actual: 15000, projected: 7000 },\n  { month: \"Jun 2025\", actual: 17000, projected: 8000 },\n  { month: \"Jul 2025\", actual: 16000, projected: 10000 },\n  { month: \"Aug 2025\", actual: 18000, projected: 11000 },\n  { month: \"Sep 2025\", actual: 9000, projected: 12500 },\n  { month: \"Oct 2025\", actual: 16000, projected: 8000 },\n  { month: \"Nov 2025\", actual: 22000, projected: 9000 },\n  { month: \"Dec 2025\", actual: 15000, projected: 14000 },\n];\n\nconst chartConfig = {\n  actual: {\n    label: \"Actual\",\n    color: \"var(--chart-4)\",\n  },\n  projected: {\n    label: \"Projected\",\n    color: \"var(--chart-3)\",\n  },\n} satisfies ChartConfig;\n\ninterface CustomCursorProps {\n  fill?: string;\n  pointerEvents?: string;\n  height?: number;\n  points?: Array<{ x: number; y: number }>;\n  className?: string;\n}\n\nfunction CustomCursor(props: CustomCursorProps) {\n  const { fill, pointerEvents, height, points, className } = props;\n\n  if (!points || points.length === 0) {\n    return null;\n  }\n\n  const { x, y } = points[0]!;\n  return (\n    <>\n      <Rectangle\n        x={x - 12}\n        y={y}\n        fill={fill}\n        pointerEvents={pointerEvents}\n        width={24}\n        height={height}\n        className={className}\n        type=\"linear\"\n      />\n      <Rectangle\n        x={x - 1}\n        y={y}\n        fill={fill}\n        pointerEvents={pointerEvents}\n        width={1}\n        height={height}\n        className=\"recharts-tooltip-inner-cursor\"\n        type=\"linear\"\n      />\n    </>\n  );\n}\n\nexport function Chart04() {\n  const id = useId();\n\n  return (\n    <Card className=\"gap-4\">\n      <CardHeader>\n        <div className=\"flex flex-wrap items-center justify-between gap-3\">\n          <div className=\"space-y-0.5\">\n            <CardTitle>Refunds</CardTitle>\n            <div className=\"flex items-start gap-2\">\n              <div className=\"font-semibold text-2xl\">$42,379</div>\n              <Badge className=\"mt-1.5 bg-rose-500/24 text-rose-500 border-none\">\n                +3.9%\n              </Badge>\n            </div>\n          </div>\n          <div className=\"flex flex-wrap items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div\n                aria-hidden=\"true\"\n                className=\"size-1.5 shrink-0 rounded-xs bg-chart-4\"\n              ></div>\n              <div className=\"text-[13px]/3 text-muted-foreground/50\">\n                Actual\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div\n                aria-hidden=\"true\"\n                className=\"size-1.5 shrink-0 rounded-xs bg-chart-3\"\n              ></div>\n              <div className=\"text-[13px]/3 text-muted-foreground/50\">\n                Projected\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer\n          config={chartConfig}\n          className=\"aspect-auto h-60 w-full [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-(--chart-4)/10 [&_.recharts-rectangle.recharts-tooltip-inner-cursor]:fill-white/20\"\n        >\n          <LineChart\n            accessibilityLayer\n            data={chartData}\n            margin={{ left: -12, right: 12, top: 12 }}\n          >\n            <defs>\n              <linearGradient id={`${id}-gradient`} x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n                <stop offset=\"0%\" stopColor=\"var(--chart-5)\" />\n                <stop offset=\"100%\" stopColor=\"var(--chart-4)\" />\n              </linearGradient>\n            </defs>\n            <CartesianGrid\n              vertical={false}\n              strokeDasharray=\"2 2\"\n              stroke=\"var(--border)\"\n            />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              tickMargin={12}\n              tickFormatter={(value) => value.slice(0, 3)}\n              stroke=\"var(--border)\"\n            />\n            <YAxis\n              axisLine={false}\n              tickLine={false}\n              tickFormatter={(value) => {\n                if (value === 0) return \"$0\";\n                return `$${value / 1000}k`;\n              }}\n              interval=\"preserveStartEnd\"\n            />\n            <Line\n              type=\"linear\"\n              dataKey=\"projected\"\n              stroke=\"var(--color-projected)\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n            />\n            <ChartTooltip\n              content={\n                <CustomTooltipContent\n                  colorMap={{\n                    actual: \"var(--chart-4)\",\n                    projected: \"var(--chart-3)\",\n                  }}\n                  labelMap={{\n                    actual: \"Actual\",\n                    projected: \"Projected\",\n                  }}\n                  dataKeys={[\"actual\", \"projected\"]}\n                  valueFormatter={(value) => `$${value.toLocaleString()}`}\n                />\n              }\n              cursor={<CustomCursor fill=\"var(--chart-4)\" />}\n            />\n            <Line\n              type=\"linear\"\n              dataKey=\"actual\"\n              stroke={`url(#${id}-gradient)`}\n              strokeWidth={2}\n              dot={false}\n              activeDot={{\n                r: 5,\n                fill: \"var(--chart-4)\",\n                stroke: \"var(--background)\",\n                strokeWidth: 2,\n              }}\n            />\n          </LineChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/chart-05.tsx",
      "content": "\"use client\";\n\nimport { useId } from \"react\";\nimport { Bar, BarChart, CartesianGrid, XAxis, YAxis } from \"recharts\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n} from \"@/components/ui/chart\";\nimport { CustomTooltipContent } from \"@/components/charts-extra\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst chartData = [\n  { month: \"Jan 2025\", individual: 2000, team: 1000, enterprise: 1000 },\n  { month: \"Feb 2025\", individual: 800, team: 4500, enterprise: 1700 },\n  { month: \"Mar 2025\", individual: 400, team: 4600, enterprise: 1000 },\n  { month: \"Apr 2025\", individual: 1800, team: 4700, enterprise: 2000 },\n  { month: \"May 2025\", individual: 1800, team: 6000, enterprise: 4000 },\n  { month: \"Jun 2025\", individual: 2500, team: 6000, enterprise: 1500 },\n  { month: \"Jul 2025\", individual: 1000, team: 2500, enterprise: 1000 },\n  { month: \"Aug 2025\", individual: 2000, team: 4000, enterprise: 2500 },\n  { month: \"Sep 2025\", individual: 4500, team: 7000, enterprise: 3000 },\n  { month: \"Oct 2025\", individual: 2500, team: 3000, enterprise: 3500 },\n  { month: \"Nov 2025\", individual: 500, team: 1500, enterprise: 1000 },\n  { month: \"Dec 2025\", individual: 2000, team: 3000, enterprise: 1500 },\n];\n\nconst chartConfig = {\n  individual: {\n    label: \"Individual\",\n    color: \"var(--chart-4)\",\n  },\n  team: {\n    label: \"Team\",\n    color: \"var(--chart-1)\",\n  },\n  enterprise: {\n    label: \"Enterprise\",\n    color: \"var(--chart-6)\",\n  },\n} satisfies ChartConfig;\n\nexport function Chart05() {\n  const id = useId();\n\n  // Get first and last month with type assertions\n  const firstMonth = chartData[0]?.month as string;\n  const lastMonth = chartData[chartData.length - 1]?.month as string;\n\n  return (\n    <Card className=\"gap-4\">\n      <CardHeader>\n        <div className=\"flex flex-wrap items-center justify-between gap-3\">\n          <div className=\"space-y-0.5\">\n            <CardTitle>Subscriptions Sold</CardTitle>\n            <div className=\"flex items-start gap-2\">\n              <div className=\"font-semibold text-2xl\">12,296</div>\n              <Badge className=\"mt-1.5 bg-emerald-500/24 text-emerald-500 border-none\">\n                +11.9%\n              </Badge>\n            </div>\n          </div>\n          <div className=\"flex flex-wrap items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div\n                aria-hidden=\"true\"\n                className=\"size-1.5 shrink-0 rounded-xs bg-chart-4\"\n              ></div>\n              <div className=\"text-[13px]/3 text-muted-foreground/50\">\n                Individual\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div\n                aria-hidden=\"true\"\n                className=\"size-1.5 shrink-0 rounded-xs bg-chart-1\"\n              ></div>\n              <div className=\"text-[13px]/3 text-muted-foreground/50\">Team</div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div\n                aria-hidden=\"true\"\n                className=\"size-1.5 shrink-0 rounded-xs bg-chart-6\"\n              ></div>\n              <div className=\"text-[13px]/3 text-muted-foreground/50\">\n                Enterprise\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer\n          config={chartConfig}\n          className=\"aspect-auto h-60 w-full [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-[var(--chart-1)]/15\"\n        >\n          <BarChart\n            accessibilityLayer\n            data={chartData}\n            maxBarSize={20}\n            margin={{ left: -12, right: 12, top: 12 }}\n          >\n            <defs>\n              <linearGradient id={`${id}-gradient`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"0%\" stopColor=\"var(--chart-1)\" />\n                <stop offset=\"100%\" stopColor=\"var(--chart-2)\" />\n              </linearGradient>\n            </defs>\n            <CartesianGrid\n              vertical={false}\n              strokeDasharray=\"2 2\"\n              stroke=\"var(--border)\"\n            />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              tickMargin={12}\n              ticks={[firstMonth, lastMonth]}\n              stroke=\"var(--border)\"\n            />\n            <YAxis\n              tickLine={false}\n              axisLine={false}\n              tickFormatter={(value) =>\n                value === 0 ? \"0\" : `${(value / 1000).toFixed(0)}K`\n              }\n            />\n            <ChartTooltip\n              content={\n                <CustomTooltipContent\n                  colorMap={{\n                    individual: \"var(--chart-4)\",\n                    team: \"var(--chart-1)\",\n                    enterprise: \"var(--chart-6)\",\n                  }}\n                  labelMap={{\n                    individual: \"Individual\",\n                    team: \"Team\",\n                    enterprise: \"Enterprise\",\n                  }}\n                  dataKeys={[\"individual\", \"team\", \"enterprise\"]}\n                  valueFormatter={(value) => `$${value.toLocaleString()}`}\n                />\n              }\n            />\n            <Bar dataKey=\"individual\" fill=\"var(--chart-4)\" stackId=\"a\" />\n            <Bar dataKey=\"team\" fill={`url(#${id}-gradient)`} stackId=\"a\" />\n            <Bar dataKey=\"enterprise\" fill=\"var(--chart-6)\" stackId=\"a\" />\n          </BarChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/chart-06.tsx",
      "content": "import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function Chart06() {\n  return (\n    <Card className=\"gap-5\">\n      <CardHeader>\n        <div className=\"flex flex-wrap items-center justify-between gap-3\">\n          <div className=\"space-y-0.5\">\n            <CardTitle>New Subscribers</CardTitle>\n            <div className=\"flex items-start gap-2\">\n              <div className=\"font-semibold text-2xl\">26,864</div>\n              <Badge className=\"mt-1.5 bg-emerald-500/24 text-emerald-500 border-none\">\n                +3.4%\n              </Badge>\n            </div>\n          </div>\n          <div className=\"flex flex-wrap items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div\n                aria-hidden=\"true\"\n                className=\"size-1.5 shrink-0 rounded-xs bg-chart-4\"\n              ></div>\n              <div className=\"text-[13px]/3 text-muted-foreground/50\">\n                Individual\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div\n                aria-hidden=\"true\"\n                className=\"size-1.5 shrink-0 rounded-xs bg-chart-1\"\n              ></div>\n              <div className=\"text-[13px]/3 text-muted-foreground/50\">Team</div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div\n                aria-hidden=\"true\"\n                className=\"size-1.5 shrink-0 rounded-xs bg-chart-6\"\n              ></div>\n              <div className=\"text-[13px]/3 text-muted-foreground/50\">\n                Enterprise\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"flex flex-col gap-5\">\n        <div className=\"flex gap-1 h-5\">\n          <div className=\"bg-chart-4 h-full\" style={{ width: \"22%\" }}></div>\n          <div\n            className=\"bg-linear-to-r from-chart-2 to-chart-1 h-full\"\n            style={{ width: \"24%\" }}\n          ></div>\n          <div className=\"bg-chart-6 h-full\" style={{ width: \"16%\" }}></div>\n          <div className=\"bg-chart-3 h-full\" style={{ width: \"38%\" }}></div>\n        </div>\n        <div>\n          <div className=\"text-[13px]/3 text-muted-foreground/50 mb-3\">\n            Reason for upgrading\n          </div>\n          <ul className=\"text-sm divide-y divide-border\">\n            <li className=\"py-2 flex items-center gap-2\">\n              <span\n                className=\"size-2 shrink-0 rounded-full bg-chart-4\"\n                aria-hidden=\"true\"\n              ></span>\n              <span className=\"grow text-muted-foreground\">\n                Needed access to premium tools.\n              </span>\n              <span className=\"text-[13px]/3 font-medium text-foreground/70\">\n                4,279\n              </span>\n            </li>\n            <li className=\"py-2 flex items-center gap-2\">\n              <span\n                className=\"size-2 shrink-0 rounded-full bg-linear-to-r from-chart-2 to-chart-1\"\n                aria-hidden=\"true\"\n              ></span>\n              <span className=\"grow text-muted-foreground\">\n                Enhanced assistance and protection.\n              </span>\n              <span className=\"text-[13px]/3 font-medium text-foreground/70\">\n                4,827\n              </span>\n            </li>\n            <li className=\"py-2 flex items-center gap-2\">\n              <span\n                className=\"size-2 shrink-0 rounded-full bg-chart-6\"\n                aria-hidden=\"true\"\n              ></span>\n              <span className=\"grow text-muted-foreground\">\n                Faster, more reliable experience.\n              </span>\n              <span className=\"text-[13px]/3 font-medium text-foreground/70\">\n                3,556\n              </span>\n            </li>\n            <li className=\"py-2 flex items-center gap-2\">\n              <span\n                className=\"size-2 shrink-0 rounded-full bg-chart-3\"\n                aria-hidden=\"true\"\n              ></span>\n              <span className=\"grow text-muted-foreground\">\n                Scaling up operations.\n              </span>\n              <span className=\"text-[13px]/3 font-medium text-foreground/70\">\n                6,987\n              </span>\n            </li>\n          </ul>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/charts-extra.tsx",
      "content": "import { TooltipProps } from \"recharts\";\n\ninterface CustomTooltipContentProps extends TooltipProps<number, string> {\n  colorMap?: Record<string, string>;\n  labelMap?: Record<string, string>;\n  // Optional array to define display order\n  dataKeys?: string[];\n  // Optional formatter for values\n  valueFormatter?: (value: number) => string;\n}\n\nexport function CustomTooltipContent({\n  active,\n  payload,\n  label,\n  colorMap = {},\n  labelMap = {},\n  dataKeys, // If provided, will be used to order the items\n  valueFormatter = (value) => `$${value.toLocaleString()}`,\n}: CustomTooltipContentProps) {\n  if (!active || !payload || !payload.length) {\n    return null;\n  }\n\n  // Create a map of payload items by dataKey for easy lookup\n  const payloadMap = payload.reduce(\n    (acc, item) => {\n      acc[item.dataKey as string] = item;\n      return acc;\n    },\n    {} as Record<string, (typeof payload)[0]>,\n  );\n\n  // If dataKeys is provided, use it to order the items\n  // Otherwise, use the original payload order\n  const orderedPayload = dataKeys\n    ? dataKeys\n        .filter((key) => payloadMap[key]) // Only include keys that exist in the payload\n        .map((key) => payloadMap[key])\n    : payload;\n\n  return (\n    <div className=\"bg-popover text-popover-foreground grid min-w-32 items-start gap-1.5 rounded-lg border px-3 py-1.5 text-xs\">\n      <div className=\"font-medium\">{label}</div>\n      <div className=\"grid gap-1.5\">\n        {orderedPayload.map((entry, index) => {\n          // Skip undefined entries\n          if (!entry) return null;\n\n          const name = entry.dataKey as string;\n          const value = entry.value as number;\n\n          // Get color and label from maps, with fallbacks\n          const color = colorMap[name] || \"var(--chart-1)\";\n          const displayLabel = labelMap[name] || name;\n\n          return (\n            <div\n              key={`item-${index}`}\n              className=\"flex items-center justify-between gap-3\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <div\n                  className=\"size-2 rounded-xs\"\n                  style={{ backgroundColor: color }}\n                />\n                <span className=\"text-muted-foreground\">{displayLabel}</span>\n              </div>\n              <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                {valueFormatter(value)}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/date-picker.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  endOfMonth,\n  endOfYear,\n  startOfMonth,\n  startOfYear,\n  subDays,\n  subMonths,\n  subYears,\n} from \"date-fns\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { format } from \"date-fns\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { DateRange } from \"react-day-picker\";\n\nexport default function DatePicker() {\n  const today = new Date();\n  const yesterday = {\n    from: subDays(today, 1),\n    to: subDays(today, 1),\n  };\n  const last7Days = {\n    from: subDays(today, 6),\n    to: today,\n  };\n  const last30Days = {\n    from: subDays(today, 29),\n    to: today,\n  };\n  const monthToDate = {\n    from: startOfMonth(today),\n    to: today,\n  };\n  const lastMonth = {\n    from: startOfMonth(subMonths(today, 1)),\n    to: endOfMonth(subMonths(today, 1)),\n  };\n  const yearToDate = {\n    from: startOfYear(today),\n    to: today,\n  };\n  const lastYear = {\n    from: startOfYear(subYears(today, 1)),\n    to: endOfYear(subYears(today, 1)),\n  };\n  const [month, setMonth] = useState(today);\n\n  const [date, setDate] = useState<DateRange | undefined>(lastYear);\n\n  return (\n    <div className=\"*:not-first:mt-2\">\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button variant=\"outline\" className=\"justify-start min-w-62\">\n            <CalendarIcon\n              size={16}\n              className=\"opacity-40 -ms-1 group-hover:text-foreground shrink-0 transition-colors\"\n              aria-hidden=\"true\"\n            />\n            <span className={cn(\"truncate\", !date && \"text-muted-foreground\")}>\n              {date?.from ? (\n                date.to ? (\n                  <>\n                    {format(date.from, \"LLL dd, y\")} -{\" \"}\n                    {format(date.to, \"LLL dd, y\")}\n                  </>\n                ) : (\n                  format(date.from, \"LLL dd, y\")\n                )\n              ) : (\n                \"Pick a date range\"\n              )}\n            </span>\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\">\n          <div className=\"flex max-sm:flex-col\">\n            <div className=\"relative py-4 max-sm:order-1 max-sm:border-t sm:w-32\">\n              <div className=\"h-full sm:border-e\">\n                <div className=\"flex flex-col px-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"w-full justify-start\"\n                    onClick={() => {\n                      setDate({\n                        from: today,\n                        to: today,\n                      });\n                      setMonth(today);\n                    }}\n                  >\n                    Today\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"w-full justify-start\"\n                    onClick={() => {\n                      setDate(yesterday);\n                      setMonth(yesterday.to);\n                    }}\n                  >\n                    Yesterday\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"w-full justify-start\"\n                    onClick={() => {\n                      setDate(last7Days);\n                      setMonth(last7Days.to);\n                    }}\n                  >\n                    Last 7 days\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"w-full justify-start\"\n                    onClick={() => {\n                      setDate(last30Days);\n                      setMonth(last30Days.to);\n                    }}\n                  >\n                    Last 30 days\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"w-full justify-start\"\n                    onClick={() => {\n                      setDate(monthToDate);\n                      setMonth(monthToDate.to);\n                    }}\n                  >\n                    Month to date\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"w-full justify-start\"\n                    onClick={() => {\n                      setDate(lastMonth);\n                      setMonth(lastMonth.to);\n                    }}\n                  >\n                    Last month\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"w-full justify-start\"\n                    onClick={() => {\n                      setDate(yearToDate);\n                      setMonth(yearToDate.to);\n                    }}\n                  >\n                    Year to date\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"w-full justify-start\"\n                    onClick={() => {\n                      setDate(lastYear);\n                      setMonth(lastYear.to);\n                    }}\n                  >\n                    Last year\n                  </Button>\n                </div>\n              </div>\n            </div>\n            <Calendar\n              mode=\"range\"\n              selected={date}\n              onSelect={(newDate) => {\n                if (newDate) {\n                  setDate(newDate);\n                }\n              }}\n              month={month}\n              onMonthChange={setMonth}\n              className=\"p-2\"\n              disabled={[\n                { after: today }, // Dates before today\n              ]}\n            />\n          </div>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/nav-user.tsx",
      "content": "\"use client\";\n\nimport {\n  RiMore2Line,\n  RiTimer2Line,\n  RiUserLine,\n  RiPulseLine,\n  RiFindReplaceLine,\n  RiLogoutCircleLine,\n} from \"@remixicon/react\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\n\nexport function NavUser({\n  user,\n}: {\n  user: {\n    name: string;\n    email: string;\n    avatar: string;\n  };\n}) {\n  const { isMobile } = useSidebar();\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <Avatar className=\"in-data-[state=expanded]:size-6 transition-[width,height] duration-200 ease-in-out\">\n                <AvatarImage src={user.avatar} alt={user.name} />\n                <AvatarFallback>CN</AvatarFallback>\n              </Avatar>\n              <div className=\"grid flex-1 text-left text-sm leading-tight ms-1\">\n                <span className=\"truncate font-medium\">{user.name}</span>\n              </div>\n              <div className=\"size-8 rounded-lg flex items-center justify-center bg-sidebar-accent/50 in-[[data-slot=dropdown-menu-trigger]:hover]:bg-transparent\">\n                <RiMore2Line className=\"size-5 opacity-40\" size={20} />\n              </div>\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg\"\n            side={isMobile ? \"bottom\" : \"right\"}\n            align=\"end\"\n            sideOffset={4}\n          >\n            <DropdownMenuItem className=\"gap-3 px-1\">\n              <RiTimer2Line\n                size={20}\n                className=\"text-muted-foreground/70\"\n                aria-hidden=\"true\"\n              />\n              <span>Dashboard</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem className=\"gap-3 px-1\">\n              <RiUserLine\n                size={20}\n                className=\"text-muted-foreground/70\"\n                aria-hidden=\"true\"\n              />\n              <span>Profile</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem className=\"gap-3 px-1\">\n              <RiPulseLine\n                size={20}\n                className=\"text-muted-foreground/70\"\n                aria-hidden=\"true\"\n              />\n              <span>Changelog</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem className=\"gap-3 px-1\">\n              <RiFindReplaceLine\n                size={20}\n                className=\"text-muted-foreground/70\"\n                aria-hidden=\"true\"\n              />\n              <span>History</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem className=\"gap-3 px-1\">\n              <RiLogoutCircleLine\n                size={20}\n                className=\"text-muted-foreground/70\"\n                aria-hidden=\"true\"\n              />\n              <span>Log out</span>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/avatar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-secondary flex size-full items-center justify-center rounded-[inherit] text-xs\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Avatar, AvatarFallback, AvatarImage };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/badge.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-full border px-1.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] transition-[color,box-shadow] [&>svg]:shrink-0 leading-normal\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\";\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/breadcrumb.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Breadcrumb({ ...props }: React.ComponentProps<\"nav\">) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />;\n}\n\nfunction BreadcrumbList({ className, ...props }: React.ComponentProps<\"ol\">) {\n  return (\n    <ol\n      data-slot=\"breadcrumb-list\"\n      className={cn(\n        \"text-muted-foreground font-medium flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction BreadcrumbItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-item\"\n      className={cn(\"inline-flex items-center gap-1.5\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction BreadcrumbLink({\n  asChild,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean;\n}) {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      data-slot=\"breadcrumb-link\"\n      className={cn(\"hover:text-foreground transition-colors\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction BreadcrumbPage({ className, ...props }: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-page\"\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn(\"text-foreground font-normal\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction BreadcrumbSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-separator\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"text-muted-foreground/50\", className)}\n      {...props}\n    >\n      {children ?? <ChevronRight size={16} />}\n    </li>\n  );\n}\n\nfunction BreadcrumbEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-ellipsis\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontal className=\"size-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  );\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-foreground text-background shadow-xs hover:bg-foreground/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-secondary/32 shadow-xs hover:bg-secondary/64 hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/calendar.tsx",
      "content": "\"use client\";\n\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  components: userComponents,\n  ...props\n}: React.ComponentProps<typeof DayPicker>) {\n  const defaultClassNames = {\n    months: \"relative flex flex-col sm:flex-row gap-4\",\n    month: \"w-full\",\n    month_caption:\n      \"relative mx-10 mb-1 flex h-9 items-center justify-center z-20\",\n    caption_label: \"text-sm font-medium\",\n    nav: \"absolute top-0 flex w-full justify-between z-10\",\n    button_previous: cn(\n      buttonVariants({ variant: \"ghost\" }),\n      \"size-9 text-muted-foreground/80 hover:text-foreground p-0\",\n    ),\n    button_next: cn(\n      buttonVariants({ variant: \"ghost\" }),\n      \"size-9 text-muted-foreground/80 hover:text-foreground p-0\",\n    ),\n    weekday: \"size-9 p-0 text-xs font-medium text-muted-foreground/80\",\n    day_button:\n      \"relative flex size-9 items-center justify-center whitespace-nowrap rounded-md p-0 text-foreground group-[[data-selected]:not(.range-middle)]:[transition-property:color,background-color,border-radius,box-shadow] group-[[data-selected]:not(.range-middle)]:duration-150 group-data-disabled:pointer-events-none focus-visible:z-10 hover:not-in-data-selected:bg-accent group-data-selected:bg-primary hover:not-in-data-selected:text-foreground group-data-selected:text-primary-foreground group-data-disabled:text-foreground/30 group-data-disabled:line-through group-data-outside:text-foreground/30 group-data-selected:group-data-outside:text-primary-foreground outline-none focus-visible:ring-ring/50 focus-visible:ring-[3px] group-[.range-start:not(.range-end)]:rounded-e-none group-[.range-end:not(.range-start)]:rounded-s-none group-[.range-middle]:rounded-none group-[.range-middle]:group-data-selected:bg-accent group-[.range-middle]:group-data-selected:text-foreground\",\n    day: \"group size-9 px-0 py-px text-sm\",\n    range_start: \"range-start\",\n    range_end: \"range-end\",\n    range_middle: \"range-middle\",\n    today:\n      \"*:after:pointer-events-none *:after:absolute *:after:bottom-1 *:after:start-1/2 *:after:z-10 *:after:size-[3px] *:after:-translate-x-1/2 *:after:rounded-full *:after:bg-primary [&[data-selected]:not(.range-middle)>*]:after:bg-background [&[data-disabled]>*]:after:bg-foreground/30 *:after:transition-colors\",\n    outside:\n      \"text-muted-foreground data-selected:bg-accent/50 data-selected:text-muted-foreground\",\n    hidden: \"invisible\",\n    week_number: \"size-9 p-0 text-xs font-medium text-muted-foreground/80\",\n  };\n\n  const mergedClassNames: typeof defaultClassNames = Object.keys(\n    defaultClassNames,\n  ).reduce(\n    (acc, key) => ({\n      ...acc,\n      [key]: classNames?.[key as keyof typeof classNames]\n        ? cn(\n            defaultClassNames[key as keyof typeof defaultClassNames],\n            classNames[key as keyof typeof classNames],\n          )\n        : defaultClassNames[key as keyof typeof defaultClassNames],\n    }),\n    {} as typeof defaultClassNames,\n  );\n\n  const defaultComponents = {\n    Chevron: (props: {\n      className?: string;\n      size?: number;\n      disabled?: boolean;\n      orientation?: \"left\" | \"right\" | \"up\" | \"down\";\n    }) => {\n      if (props.orientation === \"left\") {\n        return <ChevronLeftIcon size={16} {...props} aria-hidden=\"true\" />;\n      }\n      return <ChevronRightIcon size={16} {...props} aria-hidden=\"true\" />;\n    },\n  };\n\n  const mergedComponents = {\n    ...defaultComponents,\n    ...userComponents,\n  };\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"w-fit\", className)}\n      classNames={mergedClassNames}\n      components={mergedComponents}\n      {...props}\n    />\n  );\n}\n\nexport { Calendar };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/card.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 border py-6\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\"flex flex-col gap-1.5 px-6\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"font-medium text-[15px] text-muted-foreground\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/chart.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as RechartsPrimitive from \"recharts\";\n\nimport { cn } from \"@/lib/utils\";\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\");\n  }\n\n  return context;\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  config: ChartConfig;\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >[\"children\"];\n}) {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground/50 [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color,\n  );\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join(\"\\n\")}\n}\n`,\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = \"dot\",\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<\"div\"> & {\n    hideLabel?: boolean;\n    hideIndicator?: boolean;\n    indicator?: \"line\" | \"dot\" | \"dashed\";\n    nameKey?: string;\n    labelKey?: string;\n  }) {\n  const { config } = useChart();\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null;\n    }\n\n    const [item] = payload;\n    const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`;\n    const itemConfig = getPayloadConfigFromPayload(config, item, key);\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label;\n\n    if (labelFormatter) {\n      return (\n        <div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      );\n    }\n\n    if (!value) {\n      return null;\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>;\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ]);\n\n  if (!active || !payload?.length) {\n    return null;\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\";\n\n  return (\n    <div\n      className={cn(\n        \"bg-popover text-popover-foreground grid min-w-32 items-start gap-1.5 rounded-lg border px-3 py-1.5 text-xs\",\n        className,\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || \"value\"}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n          const indicatorColor = color || item.payload.fill || item.color;\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                \"[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5\",\n                indicator === \"dot\" && \"items-center\",\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          \"shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)\",\n                          {\n                            \"h-2.5 w-2.5\": indicator === \"dot\",\n                            \"w-1\": indicator === \"line\",\n                            \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                              indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          },\n                        )}\n                        style={\n                          {\n                            \"--color-bg\": indicatorColor,\n                            \"--color-border\": indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      \"flex flex-1 justify-between leading-none gap-3\",\n                      nestLabel ? \"items-end\" : \"items-center\",\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey,\n}: React.ComponentProps<\"div\"> &\n  Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n    hideIcon?: boolean;\n    nameKey?: string;\n  }) {\n  const { config } = useChart();\n\n  if (!payload?.length) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className,\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              \"[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3\",\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string,\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string;\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config];\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/collapsible.tsx",
      "content": "\"use client\";\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\";\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />;\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  );\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  );\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/dropdown-menu.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype PointerDownEvent = Parameters<\n  NonNullable<DropdownMenuPrimitive.DropdownMenuContentProps[\"onPointerDown\"]>\n>[0];\ntype PointerDownOutsideEvent = Parameters<\n  NonNullable<\n    DropdownMenuPrimitive.DropdownMenuContentProps[\"onPointerDownOutside\"]\n  >\n>[0];\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />;\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  );\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  onPointerDown,\n  onPointerDownOutside,\n  onCloseAutoFocus,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  const isCloseFromMouse = React.useRef<boolean>(false);\n\n  const handlePointerDown = React.useCallback(\n    (e: PointerDownEvent) => {\n      isCloseFromMouse.current = true;\n      onPointerDown?.(e);\n    },\n    [onPointerDown],\n  );\n\n  const handlePointerDownOutside = React.useCallback(\n    (e: PointerDownOutsideEvent) => {\n      isCloseFromMouse.current = true;\n      onPointerDownOutside?.(e);\n    },\n    [onPointerDownOutside],\n  );\n\n  const handleCloseAutoFocus = React.useCallback(\n    (e: Event) => {\n      if (onCloseAutoFocus) {\n        return onCloseAutoFocus(e);\n      }\n\n      if (!isCloseFromMouse.current) {\n        return;\n      }\n\n      e.preventDefault();\n      isCloseFromMouse.current = false;\n    },\n    [onCloseAutoFocus],\n  );\n\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-40 overflow-hidden rounded-md border p-1 shadow-lg\",\n          className,\n        )}\n        onPointerDown={handlePointerDown}\n        onPointerDownOutside={handlePointerDownOutside}\n        onCloseAutoFocus={handleCloseAutoFocus}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  );\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  );\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean;\n  variant?: \"default\" | \"destructive\";\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon size={16} />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  );\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  );\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"text-muted-foreground px-2 py-1.5 text-xs font-medium data-[inset]:pl-8\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <kbd\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"bg-background text-muted-foreground/70 ms-auto -me-1 inline-flex h-5 max-h-full items-center rounded border px-1 font-[inherit] text-[0.625rem] font-medium\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />;\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon\n        size={16}\n        className=\"text-muted-foreground/80 ml-auto\"\n      />\n    </DropdownMenuPrimitive.SubTrigger>\n  );\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-40 overflow-hidden rounded-md border p-1 shadow-lg\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/input.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Input };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/label.tsx",
      "content": "\"use client\";\n\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"text-foreground text-sm leading-4 font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Label };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/popover.tsx",
      "content": "\"use client\";\n\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />;\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />;\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  showArrow = false,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content> & {\n  showArrow?: boolean;\n}) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 rounded-md border p-4 shadow-md outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        {props.children}\n        {showArrow && (\n          <PopoverPrimitive.Arrow className=\"fill-popover -my-px drop-shadow-[0_1px_0_hsl(var(--border))]\" />\n        )}\n      </PopoverPrimitive.Content>\n    </PopoverPrimitive.Portal>\n  );\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />;\n}\n\nexport { Popover, PopoverAnchor, PopoverContent, PopoverTrigger };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/radio-group.tsx",
      "content": "\"use client\";\n\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction RadioGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn(\"grid gap-3\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction RadioGroupItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        \"border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center text-current\">\n        <svg\n          width=\"6\"\n          height=\"6\"\n          viewBox=\"0 0 6 6\"\n          fill=\"currentcolor\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <circle cx=\"3\" cy=\"3\" r=\"3\" />\n        </svg>\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  );\n}\n\nexport { RadioGroup, RadioGroupItem };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/separator.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator-root\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Separator };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/sheet.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\";\nimport { XIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />;\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />;\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />;\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />;\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\";\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  );\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/sidebar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { RiSkipLeftLine } from \"@remixicon/react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { RiSkipRightLine } from \"@remixicon/react\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}) {\n  const isMobile = useIsMobile();\n  const [openMobile, setOpenMobile] = React.useState(false);\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen);\n  const open = openProp ?? _open;\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value;\n      if (setOpenProp) {\n        setOpenProp(openState);\n      } else {\n        _setOpen(openState);\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n    },\n    [setOpenProp, open],\n  );\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\n  }, [isMobile, setOpen, setOpenMobile]);\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault();\n        toggleSidebar();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [toggleSidebar]);\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\";\n\n  const contextValue = React.useMemo<SidebarContext>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n  );\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className,\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  );\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\";\n  variant?: \"sidebar\" | \"floating\" | \"inset\";\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetHeader className=\"sr-only\">\n          <SheetTitle>Sidebar</SheetTitle>\n          <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n        </SheetHeader>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    );\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        className={cn(\n          \"relative h-svh w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-in-out\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\",\n        )}\n      />\n      <div\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-in-out md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className,\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar, open } = useSidebar();\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\n        \"text-muted-foreground/70 hover:text-foreground\",\n        className,\n      )}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      {open ? (\n        <RiSkipLeftLine className=\"size-5.5\" size={22} aria-hidden=\"true\" />\n      ) : (\n        <RiSkipRightLine className=\"size-5.5\" size={22} aria-hidden=\"true\" />\n      )}\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-in-out group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex min-h-svh flex-1 flex-col\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-(--spacing(4)))] md:peer-data-[variant=inset]:rounded-s-4xl md:peer-data-[variant=inset]:shadow-[0_0_0_1px_var(--border)] md:peer-data-[state=collapsed]:rounded-s-none! transition-[border-radius] duration-200 ease-in-out\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-y-auto overflow-x-hidden group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex mb-3 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-in-out focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  );\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean;\n  isActive?: boolean;\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\";\n  const { isMobile, state } = useSidebar();\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  );\n\n  if (!tooltip) {\n    return button;\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    };\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  );\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean;\n  showOnHover?: boolean;\n}) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean;\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean;\n  size?: \"sm\" | \"md\";\n  isActive?: boolean;\n}) {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/skeleton.tsx",
      "content": "import { cn } from \"@/lib/utils\";\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-primary/10 animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  );\n}\n\nexport { Skeleton };\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/tooltip.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  );\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  );\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 4,\n  showArrow = false,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content> & {\n  showArrow?: boolean;\n}) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-w-70 rounded-md border px-3 py-1.5 text-xs\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showArrow && (\n          <TooltipPrimitive.Arrow className=\"fill-popover -my-px drop-shadow-[0_1px_0_hsl(var(--border))]\" />\n        )}\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n}\n\nexport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger };\n",
      "type": "registry:component"
    },
    {
      "path": "hooks/use-mobile.ts",
      "content": "import * as React from \"react\";\n\nconst MOBILE_BREAKPOINT = 768;\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(\n    undefined,\n  );\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    };\n    mql.addEventListener(\"change\", onChange);\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    return () => mql.removeEventListener(\"change\", onChange);\n  }, []);\n\n  return !!isMobile;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "next.config.mjs",
      "content": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  assetPrefix: \"/exp3-static\",\n  transpilePackages: [\"@workspace/ui\"],\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'raw.githubusercontent.com',\n      },\n    ],    \n  },  \n}\n\nexport default nextConfig\n",
      "type": "registry:file",
      "target": "next.config.mjs"
    }
  ],
  "cssVars": {
    "theme": {
      "font-sans": "var(--font-sans), ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "font-mono": "var(--font-mono), ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace"
    },
    "light": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.141 0.005 285.823)",
      "card": "oklch(1 0 0)",
      "card-foreground": "oklch(0.141 0.005 285.823)",
      "popover": "oklch(1 0 0)",
      "popover-foreground": "oklch(0.141 0.005 285.823)",
      "primary": "oklch(0.606 0.25 292.717)",
      "primary-foreground": "oklch(0.979 0.021 166.113)",
      "secondary": "oklch(0.967 0.001 286.375)",
      "secondary-foreground": "oklch(0.183 0.006 285.79)",
      "muted": "oklch(0.967 0.001 286.375)",
      "muted-foreground": "oklch(0.552 0.016 285.938)",
      "accent": "oklch(0.967 0.001 286.375)",
      "accent-foreground": "oklch(0.183 0.006 285.79)",
      "destructive": "oklch(0.637 0.237 25.331)",
      "destructive-foreground": "oklch(0.637 0.237 25.331)",
      "border": "oklch(0.92 0.004 286.32)",
      "input": "oklch(0.871 0.006 286.286)",
      "ring": "oklch(0.871 0.006 286.286)",
      "chart-1": "oklch(0.606 0.25 292.717)",
      "chart-2": "oklch(0.541 0.281 293.009)",
      "chart-3": "oklch(0.92 0.004 286.32)",
      "chart-4": "oklch(0.645 0.246 16.439)",
      "chart-5": "oklch(0.586 0.253 17.585)",
      "chart-6": "oklch(0.696 0.17 162.48)",
      "radius": "0.625rem",
      "sidebar": "oklch(0.985 0 0)",
      "sidebar-foreground": "oklch(0.37 0.013 285.805)",
      "sidebar-primary": "oklch(0.606 0.25 292.717)",
      "sidebar-primary-foreground": "oklch(0.985 0 0)",
      "sidebar-accent": "oklch(0.967 0.001 286.375)",
      "sidebar-accent-foreground": "oklch(0.21 0.006 285.885)",
      "sidebar-border": "oklch(0.92 0.004 286.32)",
      "sidebar-ring": "oklch(0.871 0.006 286.286)"
    },
    "dark": {
      "background": "oklch(0.183 0.006 285.79)",
      "foreground": "oklch(0.985 0 0)",
      "card": "oklch(0.183 0.006 285.79)",
      "card-foreground": "oklch(0.985 0 0)",
      "popover": "oklch(0.183 0.006 285.79)",
      "popover-foreground": "oklch(0.985 0 0)",
      "primary": "oklch(0.606 0.25 292.717)",
      "primary-foreground": "oklch(0.979 0.021 166.113)",
      "secondary": "oklch(0.274 0.006 286.033)",
      "secondary-foreground": "oklch(0.985 0 0)",
      "muted": "oklch(0.21 0.006 285.885)",
      "muted-foreground": "oklch(0.705 0.015 286.067)",
      "accent": "oklch(0.21 0.006 285.885)",
      "accent-foreground": "oklch(0.985 0 0)",
      "destructive": "oklch(0.637 0.237 25.331)",
      "destructive-foreground": "oklch(0.637 0.237 25.331)",
      "border": "oklch(0.246 0.009 285.69)",
      "input": "oklch(0.246 0.009 285.69)",
      "ring": "oklch(0.442 0.017 285.786)",
      "chart-1": "oklch(0.606 0.25 292.717)",
      "chart-2": "oklch(0.541 0.281 293.009)",
      "chart-3": "oklch(0.274 0.006 286.033)",
      "chart-4": "oklch(0.645 0.246 16.439)",
      "chart-5": "oklch(0.586 0.253 17.585)",
      "chart-6": "oklch(0.696 0.17 162.48)",
      "sidebar": "oklch(0.21 0.006 285.885)",
      "sidebar-foreground": "oklch(0.967 0.001 286.375)",
      "sidebar-primary": "oklch(0.606 0.25 292.717)",
      "sidebar-primary-foreground": "oklch(1 0 0)",
      "sidebar-accent": "oklch(0.274 0.006 286.033)",
      "sidebar-accent-foreground": "oklch(0.967 0.001 286.375)",
      "sidebar-border": "oklch(0.274 0.006 286.033)",
      "sidebar-ring": "oklch(0.442 0.017 285.786)"
    }
  }
}